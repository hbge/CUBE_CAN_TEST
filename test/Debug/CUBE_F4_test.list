
CUBE_F4_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f68  08003f68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f68  08003f68  00013f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f70  08003f70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f74  08003f74  00013f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08003fe8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003fe8  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000931e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018a6  00000000  00000000  000293be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002ac68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  0002b480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000211e3  00000000  00000000  0002bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006adc  00000000  00000000  0004cdb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4c75  00000000  00000000  0005388f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00118504  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000273c  00000000  00000000  00118580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e5c 	.word	0x08003e5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003e5c 	.word	0x08003e5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <__io_putchar+0x20>)
 8000582:	f002 fa67 	bl	8002a54 <HAL_UART_Transmit>

  return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000c0 	.word	0x200000c0

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fc19 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f8a7 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f975 	bl	8000890 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005a6:	f000 f90d 	bl	80007c4 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80005aa:	f000 f945 	bl	8000838 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  sFilterConfig.FilterBank = 0;
 80005ae:	4b48      	ldr	r3, [pc, #288]	; (80006d0 <main+0x13c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005b4:	4b46      	ldr	r3, [pc, #280]	; (80006d0 <main+0x13c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ba:	4b45      	ldr	r3, [pc, #276]	; (80006d0 <main+0x13c>)
 80005bc:	2201      	movs	r2, #1
 80005be:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80005c0:	4b43      	ldr	r3, [pc, #268]	; (80006d0 <main+0x13c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80005c6:	4b42      	ldr	r3, [pc, #264]	; (80006d0 <main+0x13c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005cc:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <main+0x13c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80005d2:	4b3f      	ldr	r3, [pc, #252]	; (80006d0 <main+0x13c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <main+0x13c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80005de:	4b3c      	ldr	r3, [pc, #240]	; (80006d0 <main+0x13c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80005e4:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <main+0x13c>)
 80005e6:	220e      	movs	r2, #14
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005ea:	4939      	ldr	r1, [pc, #228]	; (80006d0 <main+0x13c>)
 80005ec:	4839      	ldr	r0, [pc, #228]	; (80006d4 <main+0x140>)
 80005ee:	f000 fd7f 	bl	80010f0 <HAL_CAN_ConfigFilter>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <main+0x68>
  {
  /* Filter configuration Error */
  Error_Handler();
 80005f8:	f000 f9e0 	bl	80009bc <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005fc:	4835      	ldr	r0, [pc, #212]	; (80006d4 <main+0x140>)
 80005fe:	f000 fe57 	bl	80012b0 <HAL_CAN_Start>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <main+0x78>
  {
  /* Start Error */
  Error_Handler();
 8000608:	f000 f9d8 	bl	80009bc <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800060c:	2103      	movs	r1, #3
 800060e:	4831      	ldr	r0, [pc, #196]	; (80006d4 <main+0x140>)
 8000610:	f001 f880 	bl	8001714 <HAL_CAN_ActivateNotification>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <main+0x8a>
  {
  /* Notification Error */
  Error_Handler();
 800061a:	f000 f9cf 	bl	80009bc <Error_Handler>
  }

  TxHeader.StdId = 0x321;
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <main+0x144>)
 8000620:	f240 3221 	movw	r2, #801	; 0x321
 8000624:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <main+0x144>)
 8000628:	2201      	movs	r2, #1
 800062a:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <main+0x144>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <main+0x144>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <main+0x144>)
 800063a:	2208      	movs	r2, #8
 800063c:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <main+0x144>)
 8000640:	2200      	movs	r2, #0
 8000642:	751a      	strb	r2, [r3, #20]
  TxData[0] = 1;
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <main+0x148>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
  TxData[1] = 2;
 800064a:	4b24      	ldr	r3, [pc, #144]	; (80006dc <main+0x148>)
 800064c:	2202      	movs	r2, #2
 800064e:	705a      	strb	r2, [r3, #1]
  TxData[2] = 3;
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <main+0x148>)
 8000652:	2203      	movs	r2, #3
 8000654:	709a      	strb	r2, [r3, #2]
  TxData[3] = 4;
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <main+0x148>)
 8000658:	2204      	movs	r2, #4
 800065a:	70da      	strb	r2, [r3, #3]
  TxData[4] = 5;
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <main+0x148>)
 800065e:	2205      	movs	r2, #5
 8000660:	711a      	strb	r2, [r3, #4]
  TxData[5] = 6;
 8000662:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <main+0x148>)
 8000664:	2206      	movs	r2, #6
 8000666:	715a      	strb	r2, [r3, #5]
  TxData[6] = 7;
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <main+0x148>)
 800066a:	2207      	movs	r2, #7
 800066c:	719a      	strb	r2, [r3, #6]
  TxData[7] = 8;
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <main+0x148>)
 8000670:	2208      	movs	r2, #8
 8000672:	71da      	strb	r2, [r3, #7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	int i;
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	4819      	ldr	r0, [pc, #100]	; (80006e0 <main+0x14c>)
 800067a:	f001 fd56 	bl	800212a <HAL_GPIO_TogglePin>
	 // HAL_Delay(100);
    printf("\n\n\r CAN1 TX: \n\r");
 800067e:	4819      	ldr	r0, [pc, #100]	; (80006e4 <main+0x150>)
 8000680:	f002 fd08 	bl	8003094 <iprintf>
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <main+0x154>)
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <main+0x148>)
 8000688:	4913      	ldr	r1, [pc, #76]	; (80006d8 <main+0x144>)
 800068a:	4812      	ldr	r0, [pc, #72]	; (80006d4 <main+0x140>)
 800068c:	f000 fe54 	bl	8001338 <HAL_CAN_AddTxMessage>
    for(i=0;i<sizeof(TxData);i++)
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	e00a      	b.n	80006ac <main+0x118>
    	{

    		printf("%x ", TxData[i]);
 8000696:	4a11      	ldr	r2, [pc, #68]	; (80006dc <main+0x148>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4619      	mov	r1, r3
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <main+0x158>)
 80006a2:	f002 fcf7 	bl	8003094 <iprintf>
    for(i=0;i<sizeof(TxData);i++)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3301      	adds	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b07      	cmp	r3, #7
 80006b0:	d9f1      	bls.n	8000696 <main+0x102>
    	}
    HAL_Delay(500);
 80006b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b6:	f000 fbfd 	bl	8000eb4 <HAL_Delay>
    TxData[7] = TxData[7] + 1;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <main+0x148>)
 80006bc:	79db      	ldrb	r3, [r3, #7]
 80006be:	3301      	adds	r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <main+0x148>)
 80006c4:	71da      	strb	r2, [r3, #7]
	 // HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin);
	  HAL_Delay(100);
 80006c6:	2064      	movs	r0, #100	; 0x64
 80006c8:	f000 fbf4 	bl	8000eb4 <HAL_Delay>
  {
 80006cc:	e7d2      	b.n	8000674 <main+0xe0>
 80006ce:	bf00      	nop
 80006d0:	20000098 	.word	0x20000098
 80006d4:	20000114 	.word	0x20000114
 80006d8:	2000013c 	.word	0x2000013c
 80006dc:	20000100 	.word	0x20000100
 80006e0:	40021000 	.word	0x40021000
 80006e4:	08003e74 	.word	0x08003e74
 80006e8:	20000108 	.word	0x20000108
 80006ec:	08003e84 	.word	0x08003e84

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	; 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fcc0 	bl	8003084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a27      	ldr	r2, [pc, #156]	; (80007bc <SystemClock_Config+0xcc>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemClock_Config+0xd0>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000764:	23a8      	movs	r3, #168	; 0xa8
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fcf3 	bl	8002160 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000780:	f000 f91c 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2105      	movs	r1, #5
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 ff1e 	bl	80025e4 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ae:	f000 f905 	bl	80009bc <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_CAN1_Init+0x6c>)
 80007cc:	4a19      	ldr	r2, [pc, #100]	; (8000834 <MX_CAN1_Init+0x70>)
 80007ce:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_CAN1_Init+0x6c>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_CAN1_Init+0x6c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_CAN1_Init+0x6c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_CAN1_Init+0x6c>)
 80007e4:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80007e8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_CAN1_Init+0x6c>)
 80007ec:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 80007f0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_CAN1_Init+0x6c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_CAN1_Init+0x6c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_CAN1_Init+0x6c>)
 8000800:	2200      	movs	r2, #0
 8000802:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_CAN1_Init+0x6c>)
 8000806:	2200      	movs	r2, #0
 8000808:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_CAN1_Init+0x6c>)
 800080c:	2200      	movs	r2, #0
 800080e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_CAN1_Init+0x6c>)
 8000812:	2200      	movs	r2, #0
 8000814:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_CAN1_Init+0x6c>)
 8000818:	f000 fb6e 	bl	8000ef8 <HAL_CAN_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000822:	f000 f8cb 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
 
  /* USER CODE END CAN1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000114 	.word	0x20000114
 8000834:	40006400 	.word	0x40006400

08000838 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_USART1_UART_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <MX_USART1_UART_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART1_UART_Init+0x50>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USART1_UART_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_USART1_UART_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART1_UART_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_USART1_UART_Init+0x50>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART1_UART_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_USART1_UART_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART1_UART_Init+0x50>)
 8000874:	f002 f87e 	bl	8002974 <HAL_MultiProcessor_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800087e:	f000 f89d 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000c0 	.word	0x200000c0
 800088c:	40011000 	.word	0x40011000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_GPIO_Init+0x9c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_GPIO_Init+0x9c>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_GPIO_Init+0x9c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_GPIO_Init+0x9c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_GPIO_Init+0x9c>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_GPIO_Init+0x9c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_GPIO_Init+0x9c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a11      	ldr	r2, [pc, #68]	; (800092c <MX_GPIO_Init+0x9c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_GPIO_Init+0x9c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <MX_GPIO_Init+0xa0>)
 8000902:	f001 fbf9 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 8000906:	f44f 7340 	mov.w	r3, #768	; 0x300
 800090a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_GPIO_Init+0xa0>)
 8000920:	f001 fa50 	bl	8001dc4 <HAL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8000942:	f001 fbf2 	bl	800212a <HAL_GPIO_TogglePin>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	int i;
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000960:	2100      	movs	r1, #0
 8000962:	4812      	ldr	r0, [pc, #72]	; (80009ac <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000964:	f000 fdc3 	bl	80014ee <HAL_CAN_GetRxMessage>
	printf("\r\n\n CAN1 EX Received!!!\n\r");
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800096a:	f002 fb93 	bl	8003094 <iprintf>
	for(i=0;i<sizeof(RxData);i++)
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	e00a      	b.n	800098a <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
	{

		printf("%x ", RxData[i]);
 8000974:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000980:	f002 fb88 	bl	8003094 <iprintf>
	for(i=0;i<sizeof(RxData);i++)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3301      	adds	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d9f1      	bls.n	8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	}
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin);
 8000990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000996:	f001 fbc8 	bl	800212a <HAL_GPIO_TogglePin>
}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000010c 	.word	0x2000010c
 80009a8:	20000154 	.word	0x20000154
 80009ac:	20000114 	.word	0x20000114
 80009b0:	08003e88 	.word	0x08003e88
 80009b4:	08003e84 	.word	0x08003e84
 80009b8:	40021000 	.word	0x40021000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("\n\r CAN ERRO!!!\n\r");
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <Error_Handler+0x10>)
 80009c2:	f002 fb67 	bl	8003094 <iprintf>
  /* USER CODE END Error_Handler_Debug */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08003ea4 	.word	0x08003ea4

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_MspInit+0x58>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <HAL_MspInit+0x58>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_MspInit+0x58>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_MspInit+0x58>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <HAL_MspInit+0x58>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x58>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2005      	movs	r0, #5
 8000a14:	f001 f99f 	bl	8001d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a18:	2005      	movs	r0, #5
 8000a1a:	f001 f9b8 	bl	8001d8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_CAN_MspInit+0x94>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d134      	bne.n	8000ab8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a1b      	ldr	r2, [pc, #108]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_CAN_MspInit+0x98>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a98:	2309      	movs	r3, #9
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <HAL_CAN_MspInit+0x9c>)
 8000aa4:	f001 f98e 	bl	8001dc4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2014      	movs	r0, #20
 8000aae:	f001 f952 	bl	8001d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ab2:	2014      	movs	r0, #20
 8000ab4:	f001 f96b 	bl	8001d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	; 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40006400 	.word	0x40006400
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <HAL_UART_MspInit+0x84>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12c      	bne.n	8000b48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_UART_MspInit+0x88>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <HAL_UART_MspInit+0x88>)
 8000af8:	f043 0310 	orr.w	r3, r3, #16
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_UART_MspInit+0x88>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_UART_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <HAL_UART_MspInit+0x88>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_UART_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b38:	2307      	movs	r3, #7
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <HAL_UART_MspInit+0x8c>)
 8000b44:	f001 f93e 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40011000 	.word	0x40011000
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f960 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <CAN1_RX0_IRQHandler+0x10>)
 8000bce:	f000 fdc7 	bl	8001760 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000114 	.word	0x20000114

08000bdc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e00a      	b.n	8000c04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bee:	f3af 8000 	nop.w
 8000bf2:	4601      	mov	r1, r0
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60ba      	str	r2, [r7, #8]
 8000bfa:	b2ca      	uxtb	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3301      	adds	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	dbf0      	blt.n	8000bee <_read+0x12>
	}

return len;
 8000c0c:	687b      	ldr	r3, [r7, #4]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	e009      	b.n	8000c3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	60ba      	str	r2, [r7, #8]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fc9d 	bl	8000570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf1      	blt.n	8000c28 <_write+0x12>
	}
	return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_close>:

int _close(int file)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
	return -1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c76:	605a      	str	r2, [r3, #4]
	return 0;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_isatty>:

int _isatty(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_sbrk+0x50>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x16>
		heap_end = &end;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <_sbrk+0x50>)
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <_sbrk+0x54>)
 8000ccc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <_sbrk+0x50>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <_sbrk+0x50>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	466a      	mov	r2, sp
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d907      	bls.n	8000cf2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ce2:	f002 f9a5 	bl	8003030 <__errno>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	230c      	movs	r3, #12
 8000cea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	e006      	b.n	8000d00 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <_sbrk+0x50>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <_sbrk+0x50>)
 8000cfc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000008c 	.word	0x2000008c
 8000d0c:	20000178 	.word	0x20000178

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <SystemInit+0x60>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <SystemInit+0x60>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <SystemInit+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <SystemInit+0x64>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <SystemInit+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <SystemInit+0x64>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <SystemInit+0x64>)
 8000d3c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <SystemInit+0x64>)
 8000d48:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <SystemInit+0x68>)
 8000d4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <SystemInit+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <SystemInit+0x64>)
 8000d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SystemInit+0x60>)
 8000d60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d64:	609a      	str	r2, [r3, #8]
#endif
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	40023800 	.word	0x40023800
 8000d78:	24003010 	.word	0x24003010

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d82:	e003      	b.n	8000d8c <LoopCopyDataInit>

08000d84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d8a:	3104      	adds	r1, #4

08000d8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d94:	d3f6      	bcc.n	8000d84 <CopyDataInit>
  ldr  r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d98:	e002      	b.n	8000da0 <LoopFillZerobss>

08000d9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d9c:	f842 3b04 	str.w	r3, [r2], #4

08000da0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000da2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000da4:	d3f9      	bcc.n	8000d9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000da6:	f7ff ffb3 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f002 f947 	bl	800303c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fbf1 	bl	8000594 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000db8:	08003f78 	.word	0x08003f78
  ldr  r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dc0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000dc4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000dc8:	20000178 	.word	0x20000178

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 ffa1 	bl	8001d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fde4 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 ffb9 	bl	8001daa <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 ff81 	bl	8001d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000170 	.word	0x20000170

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000170 	.word	0x20000170

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff ffee 	bl	8000e9c <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_Delay+0x40>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffde 	bl	8000e9c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0ed      	b.n	80010e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d102      	bne.n	8000f1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fd88 	bl	8000a2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0202 	bic.w	r2, r2, #2
 8000f2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f2c:	f7ff ffb6 	bl	8000e9c <HAL_GetTick>
 8000f30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f32:	e012      	b.n	8000f5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f34:	f7ff ffb2 	bl	8000e9c <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b0a      	cmp	r3, #10
 8000f40:	d90b      	bls.n	8000f5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2205      	movs	r2, #5
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e0c5      	b.n	80010e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e5      	bne.n	8000f34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0201 	orr.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f78:	f7ff ff90 	bl	8000e9c <HAL_GetTick>
 8000f7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f7e:	e012      	b.n	8000fa6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f80:	f7ff ff8c 	bl	8000e9c <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b0a      	cmp	r3, #10
 8000f8c:	d90b      	bls.n	8000fa6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e09f      	b.n	80010e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0e5      	beq.n	8000f80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7e1b      	ldrb	r3, [r3, #24]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d108      	bne.n	8000fce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e007      	b.n	8000fde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7e5b      	ldrb	r3, [r3, #25]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d108      	bne.n	8000ff8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e007      	b.n	8001008 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001006:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7e9b      	ldrb	r3, [r3, #26]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d108      	bne.n	8001022 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0220 	orr.w	r2, r2, #32
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e007      	b.n	8001032 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0220 	bic.w	r2, r2, #32
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7edb      	ldrb	r3, [r3, #27]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0210 	bic.w	r2, r2, #16
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	e007      	b.n	800105c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0210 	orr.w	r2, r2, #16
 800105a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7f1b      	ldrb	r3, [r3, #28]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d108      	bne.n	8001076 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0208 	orr.w	r2, r2, #8
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e007      	b.n	8001086 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0208 	bic.w	r2, r2, #8
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7f5b      	ldrb	r3, [r3, #29]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d108      	bne.n	80010a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0204 	orr.w	r2, r2, #4
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e007      	b.n	80010b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0204 	bic.w	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	ea42 0103 	orr.w	r1, r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001106:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001108:	7cfb      	ldrb	r3, [r7, #19]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d003      	beq.n	8001116 <HAL_CAN_ConfigFilter+0x26>
 800110e:	7cfb      	ldrb	r3, [r7, #19]
 8001110:	2b02      	cmp	r3, #2
 8001112:	f040 80be 	bne.w	8001292 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001116:	4b65      	ldr	r3, [pc, #404]	; (80012ac <HAL_CAN_ConfigFilter+0x1bc>)
 8001118:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001130:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	431a      	orrs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	2201      	movs	r2, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43db      	mvns	r3, r3
 8001168:	401a      	ands	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d123      	bne.n	80011c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800119a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3248      	adds	r2, #72	; 0x48
 80011a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b6:	6979      	ldr	r1, [r7, #20]
 80011b8:	3348      	adds	r3, #72	; 0x48
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	440b      	add	r3, r1
 80011be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d122      	bne.n	800120e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3248      	adds	r2, #72	; 0x48
 80011ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001202:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001204:	6979      	ldr	r1, [r7, #20]
 8001206:	3348      	adds	r3, #72	; 0x48
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	401a      	ands	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001228:	e007      	b.n	800123a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	431a      	orrs	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	401a      	ands	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001254:	e007      	b.n	8001266 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	431a      	orrs	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d107      	bne.n	800127e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	431a      	orrs	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001284:	f023 0201 	bic.w	r2, r3, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e006      	b.n	80012a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
  }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	40006400 	.word	0x40006400

080012b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d12e      	bne.n	8001322 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0201 	bic.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012dc:	f7ff fdde 	bl	8000e9c <HAL_GetTick>
 80012e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012e2:	e012      	b.n	800130a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012e4:	f7ff fdda 	bl	8000e9c <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b0a      	cmp	r3, #10
 80012f0:	d90b      	bls.n	800130a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2205      	movs	r2, #5
 8001302:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e012      	b.n	8001330 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e5      	bne.n	80012e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e006      	b.n	8001330 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
  }
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d003      	beq.n	8001364 <HAL_CAN_AddTxMessage+0x2c>
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	2b02      	cmp	r3, #2
 8001360:	f040 80b8 	bne.w	80014d4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10a      	bne.n	8001384 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80a0 	beq.w	80014c4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	0e1b      	lsrs	r3, r3, #24
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d907      	bls.n	80013a4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e09e      	b.n	80014e2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013a4:	2201      	movs	r2, #1
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	409a      	lsls	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10d      	bne.n	80013d2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013c0:	68f9      	ldr	r1, [r7, #12]
 80013c2:	6809      	ldr	r1, [r1, #0]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3318      	adds	r3, #24
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	440b      	add	r3, r1
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e00f      	b.n	80013f2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013e2:	68f9      	ldr	r1, [r7, #12]
 80013e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3318      	adds	r3, #24
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	440b      	add	r3, r1
 80013f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3318      	adds	r3, #24
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	440b      	add	r3, r1
 8001402:	3304      	adds	r3, #4
 8001404:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	7d1b      	ldrb	r3, [r3, #20]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d111      	bne.n	8001432 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3318      	adds	r3, #24
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	3304      	adds	r3, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	6811      	ldr	r1, [r2, #0]
 8001422:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3318      	adds	r3, #24
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	440b      	add	r3, r1
 800142e:	3304      	adds	r3, #4
 8001430:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3307      	adds	r3, #7
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	061a      	lsls	r2, r3, #24
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3306      	adds	r3, #6
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	041b      	lsls	r3, r3, #16
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3305      	adds	r3, #5
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	4313      	orrs	r3, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	3204      	adds	r2, #4
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	4610      	mov	r0, r2
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	6811      	ldr	r1, [r2, #0]
 800145a:	ea43 0200 	orr.w	r2, r3, r0
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	440b      	add	r3, r1
 8001464:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001468:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3303      	adds	r3, #3
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	061a      	lsls	r2, r3, #24
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3302      	adds	r3, #2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	041b      	lsls	r3, r3, #16
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	4313      	orrs	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	4610      	mov	r0, r2
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	6811      	ldr	r1, [r2, #0]
 8001490:	ea43 0200 	orr.w	r2, r3, r0
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	440b      	add	r3, r1
 800149a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800149e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3318      	adds	r3, #24
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	6811      	ldr	r1, [r2, #0]
 80014b2:	f043 0201 	orr.w	r2, r3, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3318      	adds	r3, #24
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	440b      	add	r3, r1
 80014be:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e00e      	b.n	80014e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e006      	b.n	80014e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
  }
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014ee:	b480      	push	{r7}
 80014f0:	b087      	sub	sp, #28
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001502:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d003      	beq.n	8001512 <HAL_CAN_GetRxMessage+0x24>
 800150a:	7dfb      	ldrb	r3, [r7, #23]
 800150c:	2b02      	cmp	r3, #2
 800150e:	f040 80f4 	bne.w	80016fa <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10e      	bne.n	8001536 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d116      	bne.n	8001554 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0e8      	b.n	8001708 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d107      	bne.n	8001554 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0d9      	b.n	8001708 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	331b      	adds	r3, #27
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	4413      	add	r3, r2
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0204 	and.w	r2, r3, #4
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10c      	bne.n	800158c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	331b      	adds	r3, #27
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	4413      	add	r3, r2
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0d5b      	lsrs	r3, r3, #21
 8001582:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e00b      	b.n	80015a4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	331b      	adds	r3, #27
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	4413      	add	r3, r2
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	08db      	lsrs	r3, r3, #3
 800159c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	331b      	adds	r3, #27
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	4413      	add	r3, r2
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	f003 0201 	and.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	331b      	adds	r3, #27
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	4413      	add	r3, r2
 80015c8:	3304      	adds	r3, #4
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 020f 	and.w	r2, r3, #15
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	331b      	adds	r3, #27
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	4413      	add	r3, r2
 80015e0:	3304      	adds	r3, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	331b      	adds	r3, #27
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	4413      	add	r3, r2
 80015f8:	3304      	adds	r3, #4
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0c1b      	lsrs	r3, r3, #16
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	4413      	add	r3, r2
 800160e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	0a1a      	lsrs	r2, r3, #8
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4413      	add	r3, r2
 800163e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0c1a      	lsrs	r2, r3, #16
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3302      	adds	r3, #2
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	4413      	add	r3, r2
 8001658:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0e1a      	lsrs	r2, r3, #24
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	3303      	adds	r3, #3
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4413      	add	r3, r2
 8001672:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	3304      	adds	r3, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	4413      	add	r3, r2
 800168a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0a1a      	lsrs	r2, r3, #8
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	3305      	adds	r3, #5
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0c1a      	lsrs	r2, r3, #16
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	3306      	adds	r3, #6
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	4413      	add	r3, r2
 80016be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0e1a      	lsrs	r2, r3, #24
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	3307      	adds	r3, #7
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d108      	bne.n	80016e6 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0220 	orr.w	r2, r2, #32
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	e007      	b.n	80016f6 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0220 	orr.w	r2, r2, #32
 80016f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e006      	b.n	8001708 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
  }
}
 8001708:	4618      	mov	r0, r3
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001724:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d002      	beq.n	8001732 <HAL_CAN_ActivateNotification+0x1e>
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d109      	bne.n	8001746 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6959      	ldr	r1, [r3, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	e006      	b.n	8001754 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
  }
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d07c      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d023      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff f8b6 	bl	8000934 <HAL_CAN_TxMailbox0CompleteCallback>
 80017c8:	e016      	b.n	80017f8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
 80017dc:	e00c      	b.n	80017f8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
 80017f0:	e002      	b.n	80017f8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f979 	bl	8001aea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d024      	beq.n	800184c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f953 	bl	8001ac2 <HAL_CAN_TxMailbox1CompleteCallback>
 800181c:	e016      	b.n	800184c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	e00c      	b.n	800184c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	e002      	b.n	800184c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f959 	bl	8001afe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d024      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800185e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f933 	bl	8001ad6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001870:	e016      	b.n	80018a0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
 8001884:	e00c      	b.n	80018a0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
 8001898:	e002      	b.n	80018a0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f939 	bl	8001b12 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00c      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2210      	movs	r2, #16
 80018c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2208      	movs	r2, #8
 80018de:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f920 	bl	8001b26 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff f828 	bl	8000954 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2210      	movs	r2, #16
 8001926:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2208      	movs	r2, #8
 8001942:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f902 	bl	8001b4e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d009      	beq.n	8001968 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f8e9 	bl	8001b3a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2210      	movs	r2, #16
 8001982:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f8ec 	bl	8001b62 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00b      	beq.n	80019ac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2208      	movs	r2, #8
 80019a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8e5 	bl	8001b76 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d075      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d06c      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d008      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	f043 0302 	orr.w	r3, r3, #2
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d03d      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d038      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a2e:	2b30      	cmp	r3, #48	; 0x30
 8001a30:	d017      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x302>
 8001a32:	2b30      	cmp	r3, #48	; 0x30
 8001a34:	d804      	bhi.n	8001a40 <HAL_CAN_IRQHandler+0x2e0>
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d009      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x2ee>
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d00c      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a3e:	e024      	b.n	8001a8a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001a40:	2b50      	cmp	r3, #80	; 0x50
 8001a42:	d018      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x316>
 8001a44:	2b60      	cmp	r3, #96	; 0x60
 8001a46:	d01b      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x320>
 8001a48:	2b40      	cmp	r3, #64	; 0x40
 8001a4a:	d00f      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x30c>
            break;
 8001a4c:	e01d      	b.n	8001a8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a56:	e018      	b.n	8001a8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a60:	e013      	b.n	8001a8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	f043 0320 	orr.w	r3, r3, #32
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a6a:	e00e      	b.n	8001a8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a74:	e009      	b.n	8001a8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a7e:	e004      	b.n	8001a8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a88:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a98:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f868 	bl	8001b8a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4907      	ldr	r1, [pc, #28]	; (8001c3c <__NVIC_EnableIRQ+0x38>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	; (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d0c:	d301      	bcc.n	8001d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00f      	b.n	8001d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <SysTick_Config+0x40>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f7ff ff8e 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <SysTick_Config+0x40>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SysTick_Config+0x40>)
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	e000e010 	.word	0xe000e010

08001d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff29 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d68:	f7ff ff3e 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	6978      	ldr	r0, [r7, #20]
 8001d74:	f7ff ff8e 	bl	8001c94 <NVIC_EncodePriority>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff5d 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff31 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ffa2 	bl	8001cfc <SysTick_Config>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	e16b      	b.n	80020b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f040 815a 	bne.w	80020b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x4a>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d123      	bne.n	8001e56 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	69b9      	ldr	r1, [r7, #24]
 8001e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0203 	and.w	r2, r3, #3
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d00b      	beq.n	8001eaa <HAL_GPIO_Init+0xe6>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e9e:	2b11      	cmp	r3, #17
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b12      	cmp	r3, #18
 8001ea8:	d130      	bne.n	8001f0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0201 	and.w	r2, r3, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80b4 	beq.w	80020b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b5f      	ldr	r3, [pc, #380]	; (80020cc <HAL_GPIO_Init+0x308>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a5e      	ldr	r2, [pc, #376]	; (80020cc <HAL_GPIO_Init+0x308>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b5c      	ldr	r3, [pc, #368]	; (80020cc <HAL_GPIO_Init+0x308>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f66:	4a5a      	ldr	r2, [pc, #360]	; (80020d0 <HAL_GPIO_Init+0x30c>)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a51      	ldr	r2, [pc, #324]	; (80020d4 <HAL_GPIO_Init+0x310>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02b      	beq.n	8001fea <HAL_GPIO_Init+0x226>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a50      	ldr	r2, [pc, #320]	; (80020d8 <HAL_GPIO_Init+0x314>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d025      	beq.n	8001fe6 <HAL_GPIO_Init+0x222>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4f      	ldr	r2, [pc, #316]	; (80020dc <HAL_GPIO_Init+0x318>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_GPIO_Init+0x21e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4e      	ldr	r2, [pc, #312]	; (80020e0 <HAL_GPIO_Init+0x31c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d019      	beq.n	8001fde <HAL_GPIO_Init+0x21a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4d      	ldr	r2, [pc, #308]	; (80020e4 <HAL_GPIO_Init+0x320>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_Init+0x216>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4c      	ldr	r2, [pc, #304]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00d      	beq.n	8001fd6 <HAL_GPIO_Init+0x212>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4b      	ldr	r2, [pc, #300]	; (80020ec <HAL_GPIO_Init+0x328>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d007      	beq.n	8001fd2 <HAL_GPIO_Init+0x20e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4a      	ldr	r2, [pc, #296]	; (80020f0 <HAL_GPIO_Init+0x32c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_GPIO_Init+0x20a>
 8001fca:	2307      	movs	r3, #7
 8001fcc:	e00e      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fce:	2308      	movs	r3, #8
 8001fd0:	e00c      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fd2:	2306      	movs	r3, #6
 8001fd4:	e00a      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	e008      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fda:	2304      	movs	r3, #4
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e004      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fea:	2300      	movs	r3, #0
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	f002 0203 	and.w	r2, r2, #3
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ffc:	4934      	ldr	r1, [pc, #208]	; (80020d0 <HAL_GPIO_Init+0x30c>)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_GPIO_Init+0x330>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800202e:	4a31      	ldr	r2, [pc, #196]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002034:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_GPIO_Init+0x330>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205e:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_GPIO_Init+0x330>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_GPIO_Init+0x330>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3301      	adds	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b0f      	cmp	r3, #15
 80020bc:	f67f ae90 	bls.w	8001de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c0:	bf00      	nop
 80020c2:	3724      	adds	r7, #36	; 0x24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40013800 	.word	0x40013800
 80020d4:	40020000 	.word	0x40020000
 80020d8:	40020400 	.word	0x40020400
 80020dc:	40020800 	.word	0x40020800
 80020e0:	40020c00 	.word	0x40020c00
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40021400 	.word	0x40021400
 80020ec:	40021800 	.word	0x40021800
 80020f0:	40021c00 	.word	0x40021c00
 80020f4:	40013c00 	.word	0x40013c00

080020f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002114:	e003      	b.n	800211e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	619a      	str	r2, [r3, #24]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	401a      	ands	r2, r3
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	429a      	cmp	r2, r3
 8002142:	d104      	bne.n	800214e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002144:	887b      	ldrh	r3, [r7, #2]
 8002146:	041a      	lsls	r2, r3, #16
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800214c:	e002      	b.n	8002154 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e22d      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d075      	beq.n	800226a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800217e:	4ba3      	ldr	r3, [pc, #652]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218a:	4ba0      	ldr	r3, [pc, #640]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002192:	2b08      	cmp	r3, #8
 8002194:	d112      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002196:	4b9d      	ldr	r3, [pc, #628]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a2:	d10b      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	4b99      	ldr	r3, [pc, #612]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05b      	beq.n	8002268 <HAL_RCC_OscConfig+0x108>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d157      	bne.n	8002268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e208      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0x74>
 80021c6:	4b91      	ldr	r3, [pc, #580]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a90      	ldr	r2, [pc, #576]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x98>
 80021de:	4b8b      	ldr	r3, [pc, #556]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a8a      	ldr	r2, [pc, #552]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a87      	ldr	r2, [pc, #540]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021f8:	4b84      	ldr	r3, [pc, #528]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a83      	ldr	r2, [pc, #524]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b81      	ldr	r3, [pc, #516]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a80      	ldr	r2, [pc, #512]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe fe40 	bl	8000e9c <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe fe3c 	bl	8000e9c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1cd      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xc0>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe fe2c 	bl	8000e9c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe fe28 	bl	8000e9c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1b9      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	4b6c      	ldr	r3, [pc, #432]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0xe8>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d063      	beq.n	800233e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002276:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b62      	ldr	r3, [pc, #392]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228e:	4b5f      	ldr	r3, [pc, #380]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b5c      	ldr	r3, [pc, #368]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e18d      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b56      	ldr	r3, [pc, #344]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4952      	ldr	r1, [pc, #328]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e03a      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b4f      	ldr	r3, [pc, #316]	; (8002410 <HAL_RCC_OscConfig+0x2b0>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe fde1 	bl	8000e9c <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022de:	f7fe fddd 	bl	8000e9c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e16e      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	4b46      	ldr	r3, [pc, #280]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4940      	ldr	r1, [pc, #256]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_RCC_OscConfig+0x2b0>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fdc0 	bl	8000e9c <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002320:	f7fe fdbc 	bl	8000e9c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e14d      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d030      	beq.n	80023ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b30      	ldr	r3, [pc, #192]	; (8002414 <HAL_RCC_OscConfig+0x2b4>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe fda0 	bl	8000e9c <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe fd9c 	bl	8000e9c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e12d      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x200>
 800237e:	e015      	b.n	80023ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_RCC_OscConfig+0x2b4>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7fe fd89 	bl	8000e9c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238e:	f7fe fd85 	bl	8000e9c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e116      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a0 	beq.w	80024fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a0e      	ldr	r2, [pc, #56]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_OscConfig+0x2b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d121      	bne.n	800243a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_RCC_OscConfig+0x2b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a07      	ldr	r2, [pc, #28]	; (8002418 <HAL_RCC_OscConfig+0x2b8>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7fe fd4b 	bl	8000e9c <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e011      	b.n	800242e <HAL_RCC_OscConfig+0x2ce>
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	42470000 	.word	0x42470000
 8002414:	42470e80 	.word	0x42470e80
 8002418:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241c:	f7fe fd3e 	bl	8000e9c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0cf      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCC_OscConfig+0x478>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d106      	bne.n	8002450 <HAL_RCC_OscConfig+0x2f0>
 8002442:	4b66      	ldr	r3, [pc, #408]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a65      	ldr	r2, [pc, #404]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
 800244e:	e01c      	b.n	800248a <HAL_RCC_OscConfig+0x32a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x312>
 8002458:	4b60      	ldr	r3, [pc, #384]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a5f      	ldr	r2, [pc, #380]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	4b5d      	ldr	r3, [pc, #372]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a5c      	ldr	r2, [pc, #368]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x32a>
 8002472:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a59      	ldr	r2, [pc, #356]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	4b57      	ldr	r3, [pc, #348]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a56      	ldr	r2, [pc, #344]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe fd03 	bl	8000e9c <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fcff 	bl	8000e9c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e08e      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4b4a      	ldr	r3, [pc, #296]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x33a>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7fe fced 	bl	8000e9c <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fce9 	bl	8000e9c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e078      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a3a      	ldr	r2, [pc, #232]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d064      	beq.n	80025cc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002502:	4b36      	ldr	r3, [pc, #216]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b08      	cmp	r3, #8
 800250c:	d05c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d141      	bne.n	800259a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <HAL_RCC_OscConfig+0x480>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fcbe 	bl	8000e9c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002524:	f7fe fcba 	bl	8000e9c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e04b      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	019b      	lsls	r3, r3, #6
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	3b01      	subs	r3, #1
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	061b      	lsls	r3, r3, #24
 8002566:	491d      	ldr	r1, [pc, #116]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800256c:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_RCC_OscConfig+0x480>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fc93 	bl	8000e9c <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe fc8f 	bl	8000e9c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e020      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x41a>
 8002598:	e018      	b.n	80025cc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_RCC_OscConfig+0x480>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fc7c 	bl	8000e9c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fc78 	bl	8000e9c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e009      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_RCC_OscConfig+0x47c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x448>
 80025c6:	e001      	b.n	80025cc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40007000 	.word	0x40007000
 80025dc:	40023800 	.word	0x40023800
 80025e0:	42470060 	.word	0x42470060

080025e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0ca      	b.n	800278e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b67      	ldr	r3, [pc, #412]	; (8002798 <HAL_RCC_ClockConfig+0x1b4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d90c      	bls.n	8002620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b64      	ldr	r3, [pc, #400]	; (8002798 <HAL_RCC_ClockConfig+0x1b4>)
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <HAL_RCC_ClockConfig+0x1b4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0b6      	b.n	800278e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002638:	4b58      	ldr	r3, [pc, #352]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a57      	ldr	r2, [pc, #348]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002650:	4b52      	ldr	r3, [pc, #328]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a51      	ldr	r2, [pc, #324]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800265a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265c:	4b4f      	ldr	r3, [pc, #316]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	494c      	ldr	r1, [pc, #304]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d044      	beq.n	8002704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	4b46      	ldr	r3, [pc, #280]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d119      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e07d      	b.n	800278e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d003      	beq.n	80026a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	4b3e      	ldr	r3, [pc, #248]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06d      	b.n	800278e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e065      	b.n	800278e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c2:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f023 0203 	bic.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4933      	ldr	r1, [pc, #204]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d4:	f7fe fbe2 	bl	8000e9c <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026dc:	f7fe fbde 	bl	8000e9c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e04d      	b.n	800278e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 020c 	and.w	r2, r3, #12
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	429a      	cmp	r2, r3
 8002702:	d1eb      	bne.n	80026dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_ClockConfig+0x1b4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d20c      	bcs.n	800272c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_RCC_ClockConfig+0x1b4>)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_RCC_ClockConfig+0x1b4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e030      	b.n	800278e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4915      	ldr	r1, [pc, #84]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	490d      	ldr	r1, [pc, #52]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800276a:	f000 f81d 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 800276e:	4601      	mov	r1, r0
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	fa21 f303 	lsr.w	r3, r1, r3
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe fb44 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023c00 	.word	0x40023c00
 800279c:	40023800 	.word	0x40023800
 80027a0:	08003eb8 	.word	0x08003eb8
 80027a4:	20000000 	.word	0x20000000

080027a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	2300      	movs	r3, #0
 80027b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027be:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_GetSysClockFreq+0x158>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d007      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x32>
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d008      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x38>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 808d 	bne.w	80028ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b4b      	ldr	r3, [pc, #300]	; (8002904 <HAL_RCC_GetSysClockFreq+0x15c>)
 80027d6:	60bb      	str	r3, [r7, #8]
       break;
 80027d8:	e08c      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027da:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <HAL_RCC_GetSysClockFreq+0x160>)
 80027dc:	60bb      	str	r3, [r7, #8]
      break;
 80027de:	e089      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e0:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_GetSysClockFreq+0x158>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ea:	4b45      	ldr	r3, [pc, #276]	; (8002900 <HAL_RCC_GetSysClockFreq+0x158>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d023      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f6:	4b42      	ldr	r3, [pc, #264]	; (8002900 <HAL_RCC_GetSysClockFreq+0x158>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	099b      	lsrs	r3, r3, #6
 80027fc:	f04f 0400 	mov.w	r4, #0
 8002800:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	ea03 0501 	and.w	r5, r3, r1
 800280c:	ea04 0602 	and.w	r6, r4, r2
 8002810:	4a3d      	ldr	r2, [pc, #244]	; (8002908 <HAL_RCC_GetSysClockFreq+0x160>)
 8002812:	fb02 f106 	mul.w	r1, r2, r6
 8002816:	2200      	movs	r2, #0
 8002818:	fb02 f205 	mul.w	r2, r2, r5
 800281c:	440a      	add	r2, r1
 800281e:	493a      	ldr	r1, [pc, #232]	; (8002908 <HAL_RCC_GetSysClockFreq+0x160>)
 8002820:	fba5 0101 	umull	r0, r1, r5, r1
 8002824:	1853      	adds	r3, r2, r1
 8002826:	4619      	mov	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f04f 0400 	mov.w	r4, #0
 800282e:	461a      	mov	r2, r3
 8002830:	4623      	mov	r3, r4
 8002832:	f7fd fd1d 	bl	8000270 <__aeabi_uldivmod>
 8002836:	4603      	mov	r3, r0
 8002838:	460c      	mov	r4, r1
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	e049      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283e:	4b30      	ldr	r3, [pc, #192]	; (8002900 <HAL_RCC_GetSysClockFreq+0x158>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	099b      	lsrs	r3, r3, #6
 8002844:	f04f 0400 	mov.w	r4, #0
 8002848:	f240 11ff 	movw	r1, #511	; 0x1ff
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	ea03 0501 	and.w	r5, r3, r1
 8002854:	ea04 0602 	and.w	r6, r4, r2
 8002858:	4629      	mov	r1, r5
 800285a:	4632      	mov	r2, r6
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	f04f 0400 	mov.w	r4, #0
 8002864:	0154      	lsls	r4, r2, #5
 8002866:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800286a:	014b      	lsls	r3, r1, #5
 800286c:	4619      	mov	r1, r3
 800286e:	4622      	mov	r2, r4
 8002870:	1b49      	subs	r1, r1, r5
 8002872:	eb62 0206 	sbc.w	r2, r2, r6
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	f04f 0400 	mov.w	r4, #0
 800287e:	0194      	lsls	r4, r2, #6
 8002880:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002884:	018b      	lsls	r3, r1, #6
 8002886:	1a5b      	subs	r3, r3, r1
 8002888:	eb64 0402 	sbc.w	r4, r4, r2
 800288c:	f04f 0100 	mov.w	r1, #0
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	00e2      	lsls	r2, r4, #3
 8002896:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800289a:	00d9      	lsls	r1, r3, #3
 800289c:	460b      	mov	r3, r1
 800289e:	4614      	mov	r4, r2
 80028a0:	195b      	adds	r3, r3, r5
 80028a2:	eb44 0406 	adc.w	r4, r4, r6
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	02a2      	lsls	r2, r4, #10
 80028b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028b4:	0299      	lsls	r1, r3, #10
 80028b6:	460b      	mov	r3, r1
 80028b8:	4614      	mov	r4, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	4621      	mov	r1, r4
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f04f 0400 	mov.w	r4, #0
 80028c4:	461a      	mov	r2, r3
 80028c6:	4623      	mov	r3, r4
 80028c8:	f7fd fcd2 	bl	8000270 <__aeabi_uldivmod>
 80028cc:	4603      	mov	r3, r0
 80028ce:	460c      	mov	r4, r1
 80028d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_GetSysClockFreq+0x158>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	3301      	adds	r3, #1
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	60bb      	str	r3, [r7, #8]
      break;
 80028ec:	e002      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_RCC_GetSysClockFreq+0x15c>)
 80028f0:	60bb      	str	r3, [r7, #8]
      break;
 80028f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f4:	68bb      	ldr	r3, [r7, #8]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	00f42400 	.word	0x00f42400
 8002908:	017d7840 	.word	0x017d7840

0800290c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_RCC_GetHCLKFreq+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000

08002924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002928:	f7ff fff0 	bl	800290c <HAL_RCC_GetHCLKFreq>
 800292c:	4601      	mov	r1, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0a9b      	lsrs	r3, r3, #10
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4a03      	ldr	r2, [pc, #12]	; (8002948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	08003ec8 	.word	0x08003ec8

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002950:	f7ff ffdc 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002954:	4601      	mov	r1, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0b5b      	lsrs	r3, r3, #13
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4a03      	ldr	r2, [pc, #12]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002962:	5cd3      	ldrb	r3, [r2, r3]
 8002964:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	08003ec8 	.word	0x08003ec8

08002974 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	460b      	mov	r3, r1
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e05f      	b.n	8002a4c <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d106      	bne.n	80029a6 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7fe f893 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2224      	movs	r2, #36	; 0x24
 80029aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f92c 	bl	8002c1c <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029e2:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 020f 	bic.w	r2, r2, #15
 80029f2:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6919      	ldr	r1, [r3, #16]
 80029fa:	7afa      	ldrb	r2, [r7, #11]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a12:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68d9      	ldr	r1, [r3, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	f040 8083 	bne.w	8002b7c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_UART_Transmit+0x2e>
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e07b      	b.n	8002b7e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_UART_Transmit+0x40>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e074      	b.n	8002b7e <HAL_UART_Transmit+0x12a>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2221      	movs	r2, #33	; 0x21
 8002aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002aaa:	f7fe f9f7 	bl	8000e9c <HAL_GetTick>
 8002aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002abc:	e042      	b.n	8002b44 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad4:	d122      	bne.n	8002b1c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f850 	bl	8002b86 <UART_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e046      	b.n	8002b7e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b02:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	3302      	adds	r3, #2
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	e017      	b.n	8002b44 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	3301      	adds	r3, #1
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	e013      	b.n	8002b44 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2200      	movs	r2, #0
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f82d 	bl	8002b86 <UART_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e023      	b.n	8002b7e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	60ba      	str	r2, [r7, #8]
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1b7      	bne.n	8002abe <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2200      	movs	r2, #0
 8002b56:	2140      	movs	r1, #64	; 0x40
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f814 	bl	8002b86 <UART_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e00a      	b.n	8002b7e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b96:	e02c      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d028      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ba6:	f7fe f979 	bl	8000e9c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d21d      	bcs.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bc4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e00f      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d0c3      	beq.n	8002b98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c1c:	b5b0      	push	{r4, r5, r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c5c:	f023 030c 	bic.w	r3, r3, #12
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	68f9      	ldr	r1, [r7, #12]
 8002c66:	430b      	orrs	r3, r1
 8002c68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c88:	f040 80e4 	bne.w	8002e54 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4aab      	ldr	r2, [pc, #684]	; (8002f40 <UART_SetConfig+0x324>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <UART_SetConfig+0x84>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4aaa      	ldr	r2, [pc, #680]	; (8002f44 <UART_SetConfig+0x328>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d16c      	bne.n	8002d7a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ca0:	f7ff fe54 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	009a      	lsls	r2, r3, #2
 8002cae:	441a      	add	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4aa3      	ldr	r2, [pc, #652]	; (8002f48 <UART_SetConfig+0x32c>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	011c      	lsls	r4, r3, #4
 8002cc4:	f7ff fe42 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009a      	lsls	r2, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fbb2 f5f3 	udiv	r5, r2, r3
 8002cde:	f7ff fe35 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	009a      	lsls	r2, r3, #2
 8002cec:	441a      	add	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	4a93      	ldr	r2, [pc, #588]	; (8002f48 <UART_SetConfig+0x32c>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	2264      	movs	r2, #100	; 0x64
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	1aeb      	subs	r3, r5, r3
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	3332      	adds	r3, #50	; 0x32
 8002d0c:	4a8e      	ldr	r2, [pc, #568]	; (8002f48 <UART_SetConfig+0x32c>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d1a:	441c      	add	r4, r3
 8002d1c:	f7ff fe16 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009a      	lsls	r2, r3, #2
 8002d2a:	441a      	add	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d36:	f7ff fe09 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	009a      	lsls	r2, r3, #2
 8002d44:	441a      	add	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	4a7d      	ldr	r2, [pc, #500]	; (8002f48 <UART_SetConfig+0x32c>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2264      	movs	r2, #100	; 0x64
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	1aeb      	subs	r3, r5, r3
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	3332      	adds	r3, #50	; 0x32
 8002d64:	4a78      	ldr	r2, [pc, #480]	; (8002f48 <UART_SetConfig+0x32c>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	f003 0207 	and.w	r2, r3, #7
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4422      	add	r2, r4
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	e154      	b.n	8003024 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d7a:	f7ff fdd3 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009a      	lsls	r2, r3, #2
 8002d88:	441a      	add	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	4a6c      	ldr	r2, [pc, #432]	; (8002f48 <UART_SetConfig+0x32c>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	011c      	lsls	r4, r3, #4
 8002d9e:	f7ff fdc1 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009a      	lsls	r2, r3, #2
 8002dac:	441a      	add	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002db8:	f7ff fdb4 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009a      	lsls	r2, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	4a5d      	ldr	r2, [pc, #372]	; (8002f48 <UART_SetConfig+0x32c>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	2264      	movs	r2, #100	; 0x64
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	1aeb      	subs	r3, r5, r3
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	3332      	adds	r3, #50	; 0x32
 8002de6:	4a58      	ldr	r2, [pc, #352]	; (8002f48 <UART_SetConfig+0x32c>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002df4:	441c      	add	r4, r3
 8002df6:	f7ff fd95 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e10:	f7ff fd88 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009a      	lsls	r2, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	4a47      	ldr	r2, [pc, #284]	; (8002f48 <UART_SetConfig+0x32c>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	2264      	movs	r2, #100	; 0x64
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	1aeb      	subs	r3, r5, r3
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	3332      	adds	r3, #50	; 0x32
 8002e3e:	4a42      	ldr	r2, [pc, #264]	; (8002f48 <UART_SetConfig+0x32c>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	f003 0207 	and.w	r2, r3, #7
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4422      	add	r2, r4
 8002e50:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002e52:	e0e7      	b.n	8003024 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a39      	ldr	r2, [pc, #228]	; (8002f40 <UART_SetConfig+0x324>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <UART_SetConfig+0x24c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a38      	ldr	r2, [pc, #224]	; (8002f44 <UART_SetConfig+0x328>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d171      	bne.n	8002f4c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002e68:	f7ff fd70 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	009a      	lsls	r2, r3, #2
 8002e76:	441a      	add	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e82:	4a31      	ldr	r2, [pc, #196]	; (8002f48 <UART_SetConfig+0x32c>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	011c      	lsls	r4, r3, #4
 8002e8c:	f7ff fd5e 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	009a      	lsls	r2, r3, #2
 8002e9a:	441a      	add	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ea6:	f7ff fd51 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009a      	lsls	r2, r3, #2
 8002eb4:	441a      	add	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <UART_SetConfig+0x32c>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2264      	movs	r2, #100	; 0x64
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	1aeb      	subs	r3, r5, r3
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	3332      	adds	r3, #50	; 0x32
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <UART_SetConfig+0x32c>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee0:	441c      	add	r4, r3
 8002ee2:	f7ff fd33 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009a      	lsls	r2, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002efc:	f7ff fd26 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009a      	lsls	r2, r3, #2
 8002f0a:	441a      	add	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <UART_SetConfig+0x32c>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	2264      	movs	r2, #100	; 0x64
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	1aeb      	subs	r3, r5, r3
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	3332      	adds	r3, #50	; 0x32
 8002f2a:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <UART_SetConfig+0x32c>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	f003 020f 	and.w	r2, r3, #15
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4422      	add	r2, r4
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	e071      	b.n	8003024 <UART_SetConfig+0x408>
 8002f40:	40011000 	.word	0x40011000
 8002f44:	40011400 	.word	0x40011400
 8002f48:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f4c:	f7ff fcea 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	009a      	lsls	r2, r3, #2
 8002f5a:	441a      	add	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	4a31      	ldr	r2, [pc, #196]	; (800302c <UART_SetConfig+0x410>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	011c      	lsls	r4, r3, #4
 8002f70:	f7ff fcd8 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009a      	lsls	r2, r3, #2
 8002f7e:	441a      	add	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f8a:	f7ff fccb 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009a      	lsls	r2, r3, #2
 8002f98:	441a      	add	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	4a21      	ldr	r2, [pc, #132]	; (800302c <UART_SetConfig+0x410>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2264      	movs	r2, #100	; 0x64
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	1aeb      	subs	r3, r5, r3
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	3332      	adds	r3, #50	; 0x32
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	; (800302c <UART_SetConfig+0x410>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc4:	441c      	add	r4, r3
 8002fc6:	f7ff fcad 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009a      	lsls	r2, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fbb2 f5f3 	udiv	r5, r2, r3
 8002fe0:	f7ff fca0 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	009a      	lsls	r2, r3, #2
 8002fee:	441a      	add	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	; (800302c <UART_SetConfig+0x410>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	2264      	movs	r2, #100	; 0x64
 8003004:	fb02 f303 	mul.w	r3, r2, r3
 8003008:	1aeb      	subs	r3, r5, r3
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	3332      	adds	r3, #50	; 0x32
 800300e:	4a07      	ldr	r2, [pc, #28]	; (800302c <UART_SetConfig+0x410>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	f003 020f 	and.w	r2, r3, #15
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4422      	add	r2, r4
 8003020:	609a      	str	r2, [r3, #8]
}
 8003022:	e7ff      	b.n	8003024 <UART_SetConfig+0x408>
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bdb0      	pop	{r4, r5, r7, pc}
 800302c:	51eb851f 	.word	0x51eb851f

08003030 <__errno>:
 8003030:	4b01      	ldr	r3, [pc, #4]	; (8003038 <__errno+0x8>)
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	2000000c 	.word	0x2000000c

0800303c <__libc_init_array>:
 800303c:	b570      	push	{r4, r5, r6, lr}
 800303e:	4e0d      	ldr	r6, [pc, #52]	; (8003074 <__libc_init_array+0x38>)
 8003040:	4c0d      	ldr	r4, [pc, #52]	; (8003078 <__libc_init_array+0x3c>)
 8003042:	1ba4      	subs	r4, r4, r6
 8003044:	10a4      	asrs	r4, r4, #2
 8003046:	2500      	movs	r5, #0
 8003048:	42a5      	cmp	r5, r4
 800304a:	d109      	bne.n	8003060 <__libc_init_array+0x24>
 800304c:	4e0b      	ldr	r6, [pc, #44]	; (800307c <__libc_init_array+0x40>)
 800304e:	4c0c      	ldr	r4, [pc, #48]	; (8003080 <__libc_init_array+0x44>)
 8003050:	f000 ff04 	bl	8003e5c <_init>
 8003054:	1ba4      	subs	r4, r4, r6
 8003056:	10a4      	asrs	r4, r4, #2
 8003058:	2500      	movs	r5, #0
 800305a:	42a5      	cmp	r5, r4
 800305c:	d105      	bne.n	800306a <__libc_init_array+0x2e>
 800305e:	bd70      	pop	{r4, r5, r6, pc}
 8003060:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003064:	4798      	blx	r3
 8003066:	3501      	adds	r5, #1
 8003068:	e7ee      	b.n	8003048 <__libc_init_array+0xc>
 800306a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800306e:	4798      	blx	r3
 8003070:	3501      	adds	r5, #1
 8003072:	e7f2      	b.n	800305a <__libc_init_array+0x1e>
 8003074:	08003f70 	.word	0x08003f70
 8003078:	08003f70 	.word	0x08003f70
 800307c:	08003f70 	.word	0x08003f70
 8003080:	08003f74 	.word	0x08003f74

08003084 <memset>:
 8003084:	4402      	add	r2, r0
 8003086:	4603      	mov	r3, r0
 8003088:	4293      	cmp	r3, r2
 800308a:	d100      	bne.n	800308e <memset+0xa>
 800308c:	4770      	bx	lr
 800308e:	f803 1b01 	strb.w	r1, [r3], #1
 8003092:	e7f9      	b.n	8003088 <memset+0x4>

08003094 <iprintf>:
 8003094:	b40f      	push	{r0, r1, r2, r3}
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <iprintf+0x2c>)
 8003098:	b513      	push	{r0, r1, r4, lr}
 800309a:	681c      	ldr	r4, [r3, #0]
 800309c:	b124      	cbz	r4, 80030a8 <iprintf+0x14>
 800309e:	69a3      	ldr	r3, [r4, #24]
 80030a0:	b913      	cbnz	r3, 80030a8 <iprintf+0x14>
 80030a2:	4620      	mov	r0, r4
 80030a4:	f000 f84e 	bl	8003144 <__sinit>
 80030a8:	ab05      	add	r3, sp, #20
 80030aa:	9a04      	ldr	r2, [sp, #16]
 80030ac:	68a1      	ldr	r1, [r4, #8]
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	4620      	mov	r0, r4
 80030b2:	f000 f955 	bl	8003360 <_vfiprintf_r>
 80030b6:	b002      	add	sp, #8
 80030b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030bc:	b004      	add	sp, #16
 80030be:	4770      	bx	lr
 80030c0:	2000000c 	.word	0x2000000c

080030c4 <std>:
 80030c4:	2300      	movs	r3, #0
 80030c6:	b510      	push	{r4, lr}
 80030c8:	4604      	mov	r4, r0
 80030ca:	e9c0 3300 	strd	r3, r3, [r0]
 80030ce:	6083      	str	r3, [r0, #8]
 80030d0:	8181      	strh	r1, [r0, #12]
 80030d2:	6643      	str	r3, [r0, #100]	; 0x64
 80030d4:	81c2      	strh	r2, [r0, #14]
 80030d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030da:	6183      	str	r3, [r0, #24]
 80030dc:	4619      	mov	r1, r3
 80030de:	2208      	movs	r2, #8
 80030e0:	305c      	adds	r0, #92	; 0x5c
 80030e2:	f7ff ffcf 	bl	8003084 <memset>
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <std+0x38>)
 80030e8:	6263      	str	r3, [r4, #36]	; 0x24
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <std+0x3c>)
 80030ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <std+0x40>)
 80030f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <std+0x44>)
 80030f4:	6224      	str	r4, [r4, #32]
 80030f6:	6323      	str	r3, [r4, #48]	; 0x30
 80030f8:	bd10      	pop	{r4, pc}
 80030fa:	bf00      	nop
 80030fc:	080038bd 	.word	0x080038bd
 8003100:	080038df 	.word	0x080038df
 8003104:	08003917 	.word	0x08003917
 8003108:	0800393b 	.word	0x0800393b

0800310c <_cleanup_r>:
 800310c:	4901      	ldr	r1, [pc, #4]	; (8003114 <_cleanup_r+0x8>)
 800310e:	f000 b885 	b.w	800321c <_fwalk_reent>
 8003112:	bf00      	nop
 8003114:	08003c15 	.word	0x08003c15

08003118 <__sfmoreglue>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	1e4a      	subs	r2, r1, #1
 800311c:	2568      	movs	r5, #104	; 0x68
 800311e:	4355      	muls	r5, r2
 8003120:	460e      	mov	r6, r1
 8003122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003126:	f000 f897 	bl	8003258 <_malloc_r>
 800312a:	4604      	mov	r4, r0
 800312c:	b140      	cbz	r0, 8003140 <__sfmoreglue+0x28>
 800312e:	2100      	movs	r1, #0
 8003130:	e9c0 1600 	strd	r1, r6, [r0]
 8003134:	300c      	adds	r0, #12
 8003136:	60a0      	str	r0, [r4, #8]
 8003138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800313c:	f7ff ffa2 	bl	8003084 <memset>
 8003140:	4620      	mov	r0, r4
 8003142:	bd70      	pop	{r4, r5, r6, pc}

08003144 <__sinit>:
 8003144:	6983      	ldr	r3, [r0, #24]
 8003146:	b510      	push	{r4, lr}
 8003148:	4604      	mov	r4, r0
 800314a:	bb33      	cbnz	r3, 800319a <__sinit+0x56>
 800314c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003150:	6503      	str	r3, [r0, #80]	; 0x50
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <__sinit+0x58>)
 8003154:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <__sinit+0x5c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6282      	str	r2, [r0, #40]	; 0x28
 800315a:	4298      	cmp	r0, r3
 800315c:	bf04      	itt	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	6183      	streq	r3, [r0, #24]
 8003162:	f000 f81f 	bl	80031a4 <__sfp>
 8003166:	6060      	str	r0, [r4, #4]
 8003168:	4620      	mov	r0, r4
 800316a:	f000 f81b 	bl	80031a4 <__sfp>
 800316e:	60a0      	str	r0, [r4, #8]
 8003170:	4620      	mov	r0, r4
 8003172:	f000 f817 	bl	80031a4 <__sfp>
 8003176:	2200      	movs	r2, #0
 8003178:	60e0      	str	r0, [r4, #12]
 800317a:	2104      	movs	r1, #4
 800317c:	6860      	ldr	r0, [r4, #4]
 800317e:	f7ff ffa1 	bl	80030c4 <std>
 8003182:	2201      	movs	r2, #1
 8003184:	2109      	movs	r1, #9
 8003186:	68a0      	ldr	r0, [r4, #8]
 8003188:	f7ff ff9c 	bl	80030c4 <std>
 800318c:	2202      	movs	r2, #2
 800318e:	2112      	movs	r1, #18
 8003190:	68e0      	ldr	r0, [r4, #12]
 8003192:	f7ff ff97 	bl	80030c4 <std>
 8003196:	2301      	movs	r3, #1
 8003198:	61a3      	str	r3, [r4, #24]
 800319a:	bd10      	pop	{r4, pc}
 800319c:	08003ed0 	.word	0x08003ed0
 80031a0:	0800310d 	.word	0x0800310d

080031a4 <__sfp>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <__sfp+0x70>)
 80031a8:	681e      	ldr	r6, [r3, #0]
 80031aa:	69b3      	ldr	r3, [r6, #24]
 80031ac:	4607      	mov	r7, r0
 80031ae:	b913      	cbnz	r3, 80031b6 <__sfp+0x12>
 80031b0:	4630      	mov	r0, r6
 80031b2:	f7ff ffc7 	bl	8003144 <__sinit>
 80031b6:	3648      	adds	r6, #72	; 0x48
 80031b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031bc:	3b01      	subs	r3, #1
 80031be:	d503      	bpl.n	80031c8 <__sfp+0x24>
 80031c0:	6833      	ldr	r3, [r6, #0]
 80031c2:	b133      	cbz	r3, 80031d2 <__sfp+0x2e>
 80031c4:	6836      	ldr	r6, [r6, #0]
 80031c6:	e7f7      	b.n	80031b8 <__sfp+0x14>
 80031c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031cc:	b16d      	cbz	r5, 80031ea <__sfp+0x46>
 80031ce:	3468      	adds	r4, #104	; 0x68
 80031d0:	e7f4      	b.n	80031bc <__sfp+0x18>
 80031d2:	2104      	movs	r1, #4
 80031d4:	4638      	mov	r0, r7
 80031d6:	f7ff ff9f 	bl	8003118 <__sfmoreglue>
 80031da:	6030      	str	r0, [r6, #0]
 80031dc:	2800      	cmp	r0, #0
 80031de:	d1f1      	bne.n	80031c4 <__sfp+0x20>
 80031e0:	230c      	movs	r3, #12
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4604      	mov	r4, r0
 80031e6:	4620      	mov	r0, r4
 80031e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <__sfp+0x74>)
 80031ec:	6665      	str	r5, [r4, #100]	; 0x64
 80031ee:	e9c4 5500 	strd	r5, r5, [r4]
 80031f2:	60a5      	str	r5, [r4, #8]
 80031f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80031f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80031fc:	2208      	movs	r2, #8
 80031fe:	4629      	mov	r1, r5
 8003200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003204:	f7ff ff3e 	bl	8003084 <memset>
 8003208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800320c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003210:	e7e9      	b.n	80031e6 <__sfp+0x42>
 8003212:	bf00      	nop
 8003214:	08003ed0 	.word	0x08003ed0
 8003218:	ffff0001 	.word	0xffff0001

0800321c <_fwalk_reent>:
 800321c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003220:	4680      	mov	r8, r0
 8003222:	4689      	mov	r9, r1
 8003224:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003228:	2600      	movs	r6, #0
 800322a:	b914      	cbnz	r4, 8003232 <_fwalk_reent+0x16>
 800322c:	4630      	mov	r0, r6
 800322e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003232:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003236:	3f01      	subs	r7, #1
 8003238:	d501      	bpl.n	800323e <_fwalk_reent+0x22>
 800323a:	6824      	ldr	r4, [r4, #0]
 800323c:	e7f5      	b.n	800322a <_fwalk_reent+0xe>
 800323e:	89ab      	ldrh	r3, [r5, #12]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d907      	bls.n	8003254 <_fwalk_reent+0x38>
 8003244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003248:	3301      	adds	r3, #1
 800324a:	d003      	beq.n	8003254 <_fwalk_reent+0x38>
 800324c:	4629      	mov	r1, r5
 800324e:	4640      	mov	r0, r8
 8003250:	47c8      	blx	r9
 8003252:	4306      	orrs	r6, r0
 8003254:	3568      	adds	r5, #104	; 0x68
 8003256:	e7ee      	b.n	8003236 <_fwalk_reent+0x1a>

08003258 <_malloc_r>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	1ccd      	adds	r5, r1, #3
 800325c:	f025 0503 	bic.w	r5, r5, #3
 8003260:	3508      	adds	r5, #8
 8003262:	2d0c      	cmp	r5, #12
 8003264:	bf38      	it	cc
 8003266:	250c      	movcc	r5, #12
 8003268:	2d00      	cmp	r5, #0
 800326a:	4606      	mov	r6, r0
 800326c:	db01      	blt.n	8003272 <_malloc_r+0x1a>
 800326e:	42a9      	cmp	r1, r5
 8003270:	d903      	bls.n	800327a <_malloc_r+0x22>
 8003272:	230c      	movs	r3, #12
 8003274:	6033      	str	r3, [r6, #0]
 8003276:	2000      	movs	r0, #0
 8003278:	bd70      	pop	{r4, r5, r6, pc}
 800327a:	f000 fd6b 	bl	8003d54 <__malloc_lock>
 800327e:	4a21      	ldr	r2, [pc, #132]	; (8003304 <_malloc_r+0xac>)
 8003280:	6814      	ldr	r4, [r2, #0]
 8003282:	4621      	mov	r1, r4
 8003284:	b991      	cbnz	r1, 80032ac <_malloc_r+0x54>
 8003286:	4c20      	ldr	r4, [pc, #128]	; (8003308 <_malloc_r+0xb0>)
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	b91b      	cbnz	r3, 8003294 <_malloc_r+0x3c>
 800328c:	4630      	mov	r0, r6
 800328e:	f000 fb05 	bl	800389c <_sbrk_r>
 8003292:	6020      	str	r0, [r4, #0]
 8003294:	4629      	mov	r1, r5
 8003296:	4630      	mov	r0, r6
 8003298:	f000 fb00 	bl	800389c <_sbrk_r>
 800329c:	1c43      	adds	r3, r0, #1
 800329e:	d124      	bne.n	80032ea <_malloc_r+0x92>
 80032a0:	230c      	movs	r3, #12
 80032a2:	6033      	str	r3, [r6, #0]
 80032a4:	4630      	mov	r0, r6
 80032a6:	f000 fd56 	bl	8003d56 <__malloc_unlock>
 80032aa:	e7e4      	b.n	8003276 <_malloc_r+0x1e>
 80032ac:	680b      	ldr	r3, [r1, #0]
 80032ae:	1b5b      	subs	r3, r3, r5
 80032b0:	d418      	bmi.n	80032e4 <_malloc_r+0x8c>
 80032b2:	2b0b      	cmp	r3, #11
 80032b4:	d90f      	bls.n	80032d6 <_malloc_r+0x7e>
 80032b6:	600b      	str	r3, [r1, #0]
 80032b8:	50cd      	str	r5, [r1, r3]
 80032ba:	18cc      	adds	r4, r1, r3
 80032bc:	4630      	mov	r0, r6
 80032be:	f000 fd4a 	bl	8003d56 <__malloc_unlock>
 80032c2:	f104 000b 	add.w	r0, r4, #11
 80032c6:	1d23      	adds	r3, r4, #4
 80032c8:	f020 0007 	bic.w	r0, r0, #7
 80032cc:	1ac3      	subs	r3, r0, r3
 80032ce:	d0d3      	beq.n	8003278 <_malloc_r+0x20>
 80032d0:	425a      	negs	r2, r3
 80032d2:	50e2      	str	r2, [r4, r3]
 80032d4:	e7d0      	b.n	8003278 <_malloc_r+0x20>
 80032d6:	428c      	cmp	r4, r1
 80032d8:	684b      	ldr	r3, [r1, #4]
 80032da:	bf16      	itet	ne
 80032dc:	6063      	strne	r3, [r4, #4]
 80032de:	6013      	streq	r3, [r2, #0]
 80032e0:	460c      	movne	r4, r1
 80032e2:	e7eb      	b.n	80032bc <_malloc_r+0x64>
 80032e4:	460c      	mov	r4, r1
 80032e6:	6849      	ldr	r1, [r1, #4]
 80032e8:	e7cc      	b.n	8003284 <_malloc_r+0x2c>
 80032ea:	1cc4      	adds	r4, r0, #3
 80032ec:	f024 0403 	bic.w	r4, r4, #3
 80032f0:	42a0      	cmp	r0, r4
 80032f2:	d005      	beq.n	8003300 <_malloc_r+0xa8>
 80032f4:	1a21      	subs	r1, r4, r0
 80032f6:	4630      	mov	r0, r6
 80032f8:	f000 fad0 	bl	800389c <_sbrk_r>
 80032fc:	3001      	adds	r0, #1
 80032fe:	d0cf      	beq.n	80032a0 <_malloc_r+0x48>
 8003300:	6025      	str	r5, [r4, #0]
 8003302:	e7db      	b.n	80032bc <_malloc_r+0x64>
 8003304:	20000090 	.word	0x20000090
 8003308:	20000094 	.word	0x20000094

0800330c <__sfputc_r>:
 800330c:	6893      	ldr	r3, [r2, #8]
 800330e:	3b01      	subs	r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	b410      	push	{r4}
 8003314:	6093      	str	r3, [r2, #8]
 8003316:	da08      	bge.n	800332a <__sfputc_r+0x1e>
 8003318:	6994      	ldr	r4, [r2, #24]
 800331a:	42a3      	cmp	r3, r4
 800331c:	db01      	blt.n	8003322 <__sfputc_r+0x16>
 800331e:	290a      	cmp	r1, #10
 8003320:	d103      	bne.n	800332a <__sfputc_r+0x1e>
 8003322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003326:	f000 bb0d 	b.w	8003944 <__swbuf_r>
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	1c58      	adds	r0, r3, #1
 800332e:	6010      	str	r0, [r2, #0]
 8003330:	7019      	strb	r1, [r3, #0]
 8003332:	4608      	mov	r0, r1
 8003334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003338:	4770      	bx	lr

0800333a <__sfputs_r>:
 800333a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333c:	4606      	mov	r6, r0
 800333e:	460f      	mov	r7, r1
 8003340:	4614      	mov	r4, r2
 8003342:	18d5      	adds	r5, r2, r3
 8003344:	42ac      	cmp	r4, r5
 8003346:	d101      	bne.n	800334c <__sfputs_r+0x12>
 8003348:	2000      	movs	r0, #0
 800334a:	e007      	b.n	800335c <__sfputs_r+0x22>
 800334c:	463a      	mov	r2, r7
 800334e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003352:	4630      	mov	r0, r6
 8003354:	f7ff ffda 	bl	800330c <__sfputc_r>
 8003358:	1c43      	adds	r3, r0, #1
 800335a:	d1f3      	bne.n	8003344 <__sfputs_r+0xa>
 800335c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003360 <_vfiprintf_r>:
 8003360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003364:	460c      	mov	r4, r1
 8003366:	b09d      	sub	sp, #116	; 0x74
 8003368:	4617      	mov	r7, r2
 800336a:	461d      	mov	r5, r3
 800336c:	4606      	mov	r6, r0
 800336e:	b118      	cbz	r0, 8003378 <_vfiprintf_r+0x18>
 8003370:	6983      	ldr	r3, [r0, #24]
 8003372:	b90b      	cbnz	r3, 8003378 <_vfiprintf_r+0x18>
 8003374:	f7ff fee6 	bl	8003144 <__sinit>
 8003378:	4b7c      	ldr	r3, [pc, #496]	; (800356c <_vfiprintf_r+0x20c>)
 800337a:	429c      	cmp	r4, r3
 800337c:	d158      	bne.n	8003430 <_vfiprintf_r+0xd0>
 800337e:	6874      	ldr	r4, [r6, #4]
 8003380:	89a3      	ldrh	r3, [r4, #12]
 8003382:	0718      	lsls	r0, r3, #28
 8003384:	d55e      	bpl.n	8003444 <_vfiprintf_r+0xe4>
 8003386:	6923      	ldr	r3, [r4, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d05b      	beq.n	8003444 <_vfiprintf_r+0xe4>
 800338c:	2300      	movs	r3, #0
 800338e:	9309      	str	r3, [sp, #36]	; 0x24
 8003390:	2320      	movs	r3, #32
 8003392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003396:	2330      	movs	r3, #48	; 0x30
 8003398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800339c:	9503      	str	r5, [sp, #12]
 800339e:	f04f 0b01 	mov.w	fp, #1
 80033a2:	46b8      	mov	r8, r7
 80033a4:	4645      	mov	r5, r8
 80033a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80033aa:	b10b      	cbz	r3, 80033b0 <_vfiprintf_r+0x50>
 80033ac:	2b25      	cmp	r3, #37	; 0x25
 80033ae:	d154      	bne.n	800345a <_vfiprintf_r+0xfa>
 80033b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80033b4:	d00b      	beq.n	80033ce <_vfiprintf_r+0x6e>
 80033b6:	4653      	mov	r3, sl
 80033b8:	463a      	mov	r2, r7
 80033ba:	4621      	mov	r1, r4
 80033bc:	4630      	mov	r0, r6
 80033be:	f7ff ffbc 	bl	800333a <__sfputs_r>
 80033c2:	3001      	adds	r0, #1
 80033c4:	f000 80c2 	beq.w	800354c <_vfiprintf_r+0x1ec>
 80033c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ca:	4453      	add	r3, sl
 80033cc:	9309      	str	r3, [sp, #36]	; 0x24
 80033ce:	f898 3000 	ldrb.w	r3, [r8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80ba 	beq.w	800354c <_vfiprintf_r+0x1ec>
 80033d8:	2300      	movs	r3, #0
 80033da:	f04f 32ff 	mov.w	r2, #4294967295
 80033de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033e2:	9304      	str	r3, [sp, #16]
 80033e4:	9307      	str	r3, [sp, #28]
 80033e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033ea:	931a      	str	r3, [sp, #104]	; 0x68
 80033ec:	46a8      	mov	r8, r5
 80033ee:	2205      	movs	r2, #5
 80033f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80033f4:	485e      	ldr	r0, [pc, #376]	; (8003570 <_vfiprintf_r+0x210>)
 80033f6:	f7fc feeb 	bl	80001d0 <memchr>
 80033fa:	9b04      	ldr	r3, [sp, #16]
 80033fc:	bb78      	cbnz	r0, 800345e <_vfiprintf_r+0xfe>
 80033fe:	06d9      	lsls	r1, r3, #27
 8003400:	bf44      	itt	mi
 8003402:	2220      	movmi	r2, #32
 8003404:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003408:	071a      	lsls	r2, r3, #28
 800340a:	bf44      	itt	mi
 800340c:	222b      	movmi	r2, #43	; 0x2b
 800340e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003412:	782a      	ldrb	r2, [r5, #0]
 8003414:	2a2a      	cmp	r2, #42	; 0x2a
 8003416:	d02a      	beq.n	800346e <_vfiprintf_r+0x10e>
 8003418:	9a07      	ldr	r2, [sp, #28]
 800341a:	46a8      	mov	r8, r5
 800341c:	2000      	movs	r0, #0
 800341e:	250a      	movs	r5, #10
 8003420:	4641      	mov	r1, r8
 8003422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003426:	3b30      	subs	r3, #48	; 0x30
 8003428:	2b09      	cmp	r3, #9
 800342a:	d969      	bls.n	8003500 <_vfiprintf_r+0x1a0>
 800342c:	b360      	cbz	r0, 8003488 <_vfiprintf_r+0x128>
 800342e:	e024      	b.n	800347a <_vfiprintf_r+0x11a>
 8003430:	4b50      	ldr	r3, [pc, #320]	; (8003574 <_vfiprintf_r+0x214>)
 8003432:	429c      	cmp	r4, r3
 8003434:	d101      	bne.n	800343a <_vfiprintf_r+0xda>
 8003436:	68b4      	ldr	r4, [r6, #8]
 8003438:	e7a2      	b.n	8003380 <_vfiprintf_r+0x20>
 800343a:	4b4f      	ldr	r3, [pc, #316]	; (8003578 <_vfiprintf_r+0x218>)
 800343c:	429c      	cmp	r4, r3
 800343e:	bf08      	it	eq
 8003440:	68f4      	ldreq	r4, [r6, #12]
 8003442:	e79d      	b.n	8003380 <_vfiprintf_r+0x20>
 8003444:	4621      	mov	r1, r4
 8003446:	4630      	mov	r0, r6
 8003448:	f000 fae0 	bl	8003a0c <__swsetup_r>
 800344c:	2800      	cmp	r0, #0
 800344e:	d09d      	beq.n	800338c <_vfiprintf_r+0x2c>
 8003450:	f04f 30ff 	mov.w	r0, #4294967295
 8003454:	b01d      	add	sp, #116	; 0x74
 8003456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800345a:	46a8      	mov	r8, r5
 800345c:	e7a2      	b.n	80033a4 <_vfiprintf_r+0x44>
 800345e:	4a44      	ldr	r2, [pc, #272]	; (8003570 <_vfiprintf_r+0x210>)
 8003460:	1a80      	subs	r0, r0, r2
 8003462:	fa0b f000 	lsl.w	r0, fp, r0
 8003466:	4318      	orrs	r0, r3
 8003468:	9004      	str	r0, [sp, #16]
 800346a:	4645      	mov	r5, r8
 800346c:	e7be      	b.n	80033ec <_vfiprintf_r+0x8c>
 800346e:	9a03      	ldr	r2, [sp, #12]
 8003470:	1d11      	adds	r1, r2, #4
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	9103      	str	r1, [sp, #12]
 8003476:	2a00      	cmp	r2, #0
 8003478:	db01      	blt.n	800347e <_vfiprintf_r+0x11e>
 800347a:	9207      	str	r2, [sp, #28]
 800347c:	e004      	b.n	8003488 <_vfiprintf_r+0x128>
 800347e:	4252      	negs	r2, r2
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	9207      	str	r2, [sp, #28]
 8003486:	9304      	str	r3, [sp, #16]
 8003488:	f898 3000 	ldrb.w	r3, [r8]
 800348c:	2b2e      	cmp	r3, #46	; 0x2e
 800348e:	d10e      	bne.n	80034ae <_vfiprintf_r+0x14e>
 8003490:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003494:	2b2a      	cmp	r3, #42	; 0x2a
 8003496:	d138      	bne.n	800350a <_vfiprintf_r+0x1aa>
 8003498:	9b03      	ldr	r3, [sp, #12]
 800349a:	1d1a      	adds	r2, r3, #4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	9203      	str	r2, [sp, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bfb8      	it	lt
 80034a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80034a8:	f108 0802 	add.w	r8, r8, #2
 80034ac:	9305      	str	r3, [sp, #20]
 80034ae:	4d33      	ldr	r5, [pc, #204]	; (800357c <_vfiprintf_r+0x21c>)
 80034b0:	f898 1000 	ldrb.w	r1, [r8]
 80034b4:	2203      	movs	r2, #3
 80034b6:	4628      	mov	r0, r5
 80034b8:	f7fc fe8a 	bl	80001d0 <memchr>
 80034bc:	b140      	cbz	r0, 80034d0 <_vfiprintf_r+0x170>
 80034be:	2340      	movs	r3, #64	; 0x40
 80034c0:	1b40      	subs	r0, r0, r5
 80034c2:	fa03 f000 	lsl.w	r0, r3, r0
 80034c6:	9b04      	ldr	r3, [sp, #16]
 80034c8:	4303      	orrs	r3, r0
 80034ca:	f108 0801 	add.w	r8, r8, #1
 80034ce:	9304      	str	r3, [sp, #16]
 80034d0:	f898 1000 	ldrb.w	r1, [r8]
 80034d4:	482a      	ldr	r0, [pc, #168]	; (8003580 <_vfiprintf_r+0x220>)
 80034d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034da:	2206      	movs	r2, #6
 80034dc:	f108 0701 	add.w	r7, r8, #1
 80034e0:	f7fc fe76 	bl	80001d0 <memchr>
 80034e4:	2800      	cmp	r0, #0
 80034e6:	d037      	beq.n	8003558 <_vfiprintf_r+0x1f8>
 80034e8:	4b26      	ldr	r3, [pc, #152]	; (8003584 <_vfiprintf_r+0x224>)
 80034ea:	bb1b      	cbnz	r3, 8003534 <_vfiprintf_r+0x1d4>
 80034ec:	9b03      	ldr	r3, [sp, #12]
 80034ee:	3307      	adds	r3, #7
 80034f0:	f023 0307 	bic.w	r3, r3, #7
 80034f4:	3308      	adds	r3, #8
 80034f6:	9303      	str	r3, [sp, #12]
 80034f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034fa:	444b      	add	r3, r9
 80034fc:	9309      	str	r3, [sp, #36]	; 0x24
 80034fe:	e750      	b.n	80033a2 <_vfiprintf_r+0x42>
 8003500:	fb05 3202 	mla	r2, r5, r2, r3
 8003504:	2001      	movs	r0, #1
 8003506:	4688      	mov	r8, r1
 8003508:	e78a      	b.n	8003420 <_vfiprintf_r+0xc0>
 800350a:	2300      	movs	r3, #0
 800350c:	f108 0801 	add.w	r8, r8, #1
 8003510:	9305      	str	r3, [sp, #20]
 8003512:	4619      	mov	r1, r3
 8003514:	250a      	movs	r5, #10
 8003516:	4640      	mov	r0, r8
 8003518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800351c:	3a30      	subs	r2, #48	; 0x30
 800351e:	2a09      	cmp	r2, #9
 8003520:	d903      	bls.n	800352a <_vfiprintf_r+0x1ca>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0c3      	beq.n	80034ae <_vfiprintf_r+0x14e>
 8003526:	9105      	str	r1, [sp, #20]
 8003528:	e7c1      	b.n	80034ae <_vfiprintf_r+0x14e>
 800352a:	fb05 2101 	mla	r1, r5, r1, r2
 800352e:	2301      	movs	r3, #1
 8003530:	4680      	mov	r8, r0
 8003532:	e7f0      	b.n	8003516 <_vfiprintf_r+0x1b6>
 8003534:	ab03      	add	r3, sp, #12
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	4622      	mov	r2, r4
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <_vfiprintf_r+0x228>)
 800353c:	a904      	add	r1, sp, #16
 800353e:	4630      	mov	r0, r6
 8003540:	f3af 8000 	nop.w
 8003544:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003548:	4681      	mov	r9, r0
 800354a:	d1d5      	bne.n	80034f8 <_vfiprintf_r+0x198>
 800354c:	89a3      	ldrh	r3, [r4, #12]
 800354e:	065b      	lsls	r3, r3, #25
 8003550:	f53f af7e 	bmi.w	8003450 <_vfiprintf_r+0xf0>
 8003554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003556:	e77d      	b.n	8003454 <_vfiprintf_r+0xf4>
 8003558:	ab03      	add	r3, sp, #12
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	4622      	mov	r2, r4
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <_vfiprintf_r+0x228>)
 8003560:	a904      	add	r1, sp, #16
 8003562:	4630      	mov	r0, r6
 8003564:	f000 f888 	bl	8003678 <_printf_i>
 8003568:	e7ec      	b.n	8003544 <_vfiprintf_r+0x1e4>
 800356a:	bf00      	nop
 800356c:	08003ef4 	.word	0x08003ef4
 8003570:	08003f34 	.word	0x08003f34
 8003574:	08003f14 	.word	0x08003f14
 8003578:	08003ed4 	.word	0x08003ed4
 800357c:	08003f3a 	.word	0x08003f3a
 8003580:	08003f3e 	.word	0x08003f3e
 8003584:	00000000 	.word	0x00000000
 8003588:	0800333b 	.word	0x0800333b

0800358c <_printf_common>:
 800358c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003590:	4691      	mov	r9, r2
 8003592:	461f      	mov	r7, r3
 8003594:	688a      	ldr	r2, [r1, #8]
 8003596:	690b      	ldr	r3, [r1, #16]
 8003598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800359c:	4293      	cmp	r3, r2
 800359e:	bfb8      	it	lt
 80035a0:	4613      	movlt	r3, r2
 80035a2:	f8c9 3000 	str.w	r3, [r9]
 80035a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035aa:	4606      	mov	r6, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	b112      	cbz	r2, 80035b6 <_printf_common+0x2a>
 80035b0:	3301      	adds	r3, #1
 80035b2:	f8c9 3000 	str.w	r3, [r9]
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	0699      	lsls	r1, r3, #26
 80035ba:	bf42      	ittt	mi
 80035bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80035c0:	3302      	addmi	r3, #2
 80035c2:	f8c9 3000 	strmi.w	r3, [r9]
 80035c6:	6825      	ldr	r5, [r4, #0]
 80035c8:	f015 0506 	ands.w	r5, r5, #6
 80035cc:	d107      	bne.n	80035de <_printf_common+0x52>
 80035ce:	f104 0a19 	add.w	sl, r4, #25
 80035d2:	68e3      	ldr	r3, [r4, #12]
 80035d4:	f8d9 2000 	ldr.w	r2, [r9]
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	42ab      	cmp	r3, r5
 80035dc:	dc28      	bgt.n	8003630 <_printf_common+0xa4>
 80035de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80035e2:	6822      	ldr	r2, [r4, #0]
 80035e4:	3300      	adds	r3, #0
 80035e6:	bf18      	it	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	0692      	lsls	r2, r2, #26
 80035ec:	d42d      	bmi.n	800364a <_printf_common+0xbe>
 80035ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035f2:	4639      	mov	r1, r7
 80035f4:	4630      	mov	r0, r6
 80035f6:	47c0      	blx	r8
 80035f8:	3001      	adds	r0, #1
 80035fa:	d020      	beq.n	800363e <_printf_common+0xb2>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	68e5      	ldr	r5, [r4, #12]
 8003600:	f8d9 2000 	ldr.w	r2, [r9]
 8003604:	f003 0306 	and.w	r3, r3, #6
 8003608:	2b04      	cmp	r3, #4
 800360a:	bf08      	it	eq
 800360c:	1aad      	subeq	r5, r5, r2
 800360e:	68a3      	ldr	r3, [r4, #8]
 8003610:	6922      	ldr	r2, [r4, #16]
 8003612:	bf0c      	ite	eq
 8003614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003618:	2500      	movne	r5, #0
 800361a:	4293      	cmp	r3, r2
 800361c:	bfc4      	itt	gt
 800361e:	1a9b      	subgt	r3, r3, r2
 8003620:	18ed      	addgt	r5, r5, r3
 8003622:	f04f 0900 	mov.w	r9, #0
 8003626:	341a      	adds	r4, #26
 8003628:	454d      	cmp	r5, r9
 800362a:	d11a      	bne.n	8003662 <_printf_common+0xd6>
 800362c:	2000      	movs	r0, #0
 800362e:	e008      	b.n	8003642 <_printf_common+0xb6>
 8003630:	2301      	movs	r3, #1
 8003632:	4652      	mov	r2, sl
 8003634:	4639      	mov	r1, r7
 8003636:	4630      	mov	r0, r6
 8003638:	47c0      	blx	r8
 800363a:	3001      	adds	r0, #1
 800363c:	d103      	bne.n	8003646 <_printf_common+0xba>
 800363e:	f04f 30ff 	mov.w	r0, #4294967295
 8003642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003646:	3501      	adds	r5, #1
 8003648:	e7c3      	b.n	80035d2 <_printf_common+0x46>
 800364a:	18e1      	adds	r1, r4, r3
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	2030      	movs	r0, #48	; 0x30
 8003650:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003654:	4422      	add	r2, r4
 8003656:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800365a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800365e:	3302      	adds	r3, #2
 8003660:	e7c5      	b.n	80035ee <_printf_common+0x62>
 8003662:	2301      	movs	r3, #1
 8003664:	4622      	mov	r2, r4
 8003666:	4639      	mov	r1, r7
 8003668:	4630      	mov	r0, r6
 800366a:	47c0      	blx	r8
 800366c:	3001      	adds	r0, #1
 800366e:	d0e6      	beq.n	800363e <_printf_common+0xb2>
 8003670:	f109 0901 	add.w	r9, r9, #1
 8003674:	e7d8      	b.n	8003628 <_printf_common+0x9c>
	...

08003678 <_printf_i>:
 8003678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800367c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003680:	460c      	mov	r4, r1
 8003682:	7e09      	ldrb	r1, [r1, #24]
 8003684:	b085      	sub	sp, #20
 8003686:	296e      	cmp	r1, #110	; 0x6e
 8003688:	4617      	mov	r7, r2
 800368a:	4606      	mov	r6, r0
 800368c:	4698      	mov	r8, r3
 800368e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003690:	f000 80b3 	beq.w	80037fa <_printf_i+0x182>
 8003694:	d822      	bhi.n	80036dc <_printf_i+0x64>
 8003696:	2963      	cmp	r1, #99	; 0x63
 8003698:	d036      	beq.n	8003708 <_printf_i+0x90>
 800369a:	d80a      	bhi.n	80036b2 <_printf_i+0x3a>
 800369c:	2900      	cmp	r1, #0
 800369e:	f000 80b9 	beq.w	8003814 <_printf_i+0x19c>
 80036a2:	2958      	cmp	r1, #88	; 0x58
 80036a4:	f000 8083 	beq.w	80037ae <_printf_i+0x136>
 80036a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80036b0:	e032      	b.n	8003718 <_printf_i+0xa0>
 80036b2:	2964      	cmp	r1, #100	; 0x64
 80036b4:	d001      	beq.n	80036ba <_printf_i+0x42>
 80036b6:	2969      	cmp	r1, #105	; 0x69
 80036b8:	d1f6      	bne.n	80036a8 <_printf_i+0x30>
 80036ba:	6820      	ldr	r0, [r4, #0]
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	0605      	lsls	r5, r0, #24
 80036c0:	f103 0104 	add.w	r1, r3, #4
 80036c4:	d52a      	bpl.n	800371c <_printf_i+0xa4>
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6011      	str	r1, [r2, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	da03      	bge.n	80036d6 <_printf_i+0x5e>
 80036ce:	222d      	movs	r2, #45	; 0x2d
 80036d0:	425b      	negs	r3, r3
 80036d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80036d6:	486f      	ldr	r0, [pc, #444]	; (8003894 <_printf_i+0x21c>)
 80036d8:	220a      	movs	r2, #10
 80036da:	e039      	b.n	8003750 <_printf_i+0xd8>
 80036dc:	2973      	cmp	r1, #115	; 0x73
 80036de:	f000 809d 	beq.w	800381c <_printf_i+0x1a4>
 80036e2:	d808      	bhi.n	80036f6 <_printf_i+0x7e>
 80036e4:	296f      	cmp	r1, #111	; 0x6f
 80036e6:	d020      	beq.n	800372a <_printf_i+0xb2>
 80036e8:	2970      	cmp	r1, #112	; 0x70
 80036ea:	d1dd      	bne.n	80036a8 <_printf_i+0x30>
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	f043 0320 	orr.w	r3, r3, #32
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	e003      	b.n	80036fe <_printf_i+0x86>
 80036f6:	2975      	cmp	r1, #117	; 0x75
 80036f8:	d017      	beq.n	800372a <_printf_i+0xb2>
 80036fa:	2978      	cmp	r1, #120	; 0x78
 80036fc:	d1d4      	bne.n	80036a8 <_printf_i+0x30>
 80036fe:	2378      	movs	r3, #120	; 0x78
 8003700:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003704:	4864      	ldr	r0, [pc, #400]	; (8003898 <_printf_i+0x220>)
 8003706:	e055      	b.n	80037b4 <_printf_i+0x13c>
 8003708:	6813      	ldr	r3, [r2, #0]
 800370a:	1d19      	adds	r1, r3, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6011      	str	r1, [r2, #0]
 8003710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003718:	2301      	movs	r3, #1
 800371a:	e08c      	b.n	8003836 <_printf_i+0x1be>
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6011      	str	r1, [r2, #0]
 8003720:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003724:	bf18      	it	ne
 8003726:	b21b      	sxthne	r3, r3
 8003728:	e7cf      	b.n	80036ca <_printf_i+0x52>
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	6825      	ldr	r5, [r4, #0]
 800372e:	1d18      	adds	r0, r3, #4
 8003730:	6010      	str	r0, [r2, #0]
 8003732:	0628      	lsls	r0, r5, #24
 8003734:	d501      	bpl.n	800373a <_printf_i+0xc2>
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	e002      	b.n	8003740 <_printf_i+0xc8>
 800373a:	0668      	lsls	r0, r5, #25
 800373c:	d5fb      	bpl.n	8003736 <_printf_i+0xbe>
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	4854      	ldr	r0, [pc, #336]	; (8003894 <_printf_i+0x21c>)
 8003742:	296f      	cmp	r1, #111	; 0x6f
 8003744:	bf14      	ite	ne
 8003746:	220a      	movne	r2, #10
 8003748:	2208      	moveq	r2, #8
 800374a:	2100      	movs	r1, #0
 800374c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003750:	6865      	ldr	r5, [r4, #4]
 8003752:	60a5      	str	r5, [r4, #8]
 8003754:	2d00      	cmp	r5, #0
 8003756:	f2c0 8095 	blt.w	8003884 <_printf_i+0x20c>
 800375a:	6821      	ldr	r1, [r4, #0]
 800375c:	f021 0104 	bic.w	r1, r1, #4
 8003760:	6021      	str	r1, [r4, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d13d      	bne.n	80037e2 <_printf_i+0x16a>
 8003766:	2d00      	cmp	r5, #0
 8003768:	f040 808e 	bne.w	8003888 <_printf_i+0x210>
 800376c:	4665      	mov	r5, ip
 800376e:	2a08      	cmp	r2, #8
 8003770:	d10b      	bne.n	800378a <_printf_i+0x112>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	07db      	lsls	r3, r3, #31
 8003776:	d508      	bpl.n	800378a <_printf_i+0x112>
 8003778:	6923      	ldr	r3, [r4, #16]
 800377a:	6862      	ldr	r2, [r4, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	bfde      	ittt	le
 8003780:	2330      	movle	r3, #48	; 0x30
 8003782:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003786:	f105 35ff 	addle.w	r5, r5, #4294967295
 800378a:	ebac 0305 	sub.w	r3, ip, r5
 800378e:	6123      	str	r3, [r4, #16]
 8003790:	f8cd 8000 	str.w	r8, [sp]
 8003794:	463b      	mov	r3, r7
 8003796:	aa03      	add	r2, sp, #12
 8003798:	4621      	mov	r1, r4
 800379a:	4630      	mov	r0, r6
 800379c:	f7ff fef6 	bl	800358c <_printf_common>
 80037a0:	3001      	adds	r0, #1
 80037a2:	d14d      	bne.n	8003840 <_printf_i+0x1c8>
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	b005      	add	sp, #20
 80037aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037ae:	4839      	ldr	r0, [pc, #228]	; (8003894 <_printf_i+0x21c>)
 80037b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	6821      	ldr	r1, [r4, #0]
 80037b8:	1d1d      	adds	r5, r3, #4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6015      	str	r5, [r2, #0]
 80037be:	060a      	lsls	r2, r1, #24
 80037c0:	d50b      	bpl.n	80037da <_printf_i+0x162>
 80037c2:	07ca      	lsls	r2, r1, #31
 80037c4:	bf44      	itt	mi
 80037c6:	f041 0120 	orrmi.w	r1, r1, #32
 80037ca:	6021      	strmi	r1, [r4, #0]
 80037cc:	b91b      	cbnz	r3, 80037d6 <_printf_i+0x15e>
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	f022 0220 	bic.w	r2, r2, #32
 80037d4:	6022      	str	r2, [r4, #0]
 80037d6:	2210      	movs	r2, #16
 80037d8:	e7b7      	b.n	800374a <_printf_i+0xd2>
 80037da:	064d      	lsls	r5, r1, #25
 80037dc:	bf48      	it	mi
 80037de:	b29b      	uxthmi	r3, r3
 80037e0:	e7ef      	b.n	80037c2 <_printf_i+0x14a>
 80037e2:	4665      	mov	r5, ip
 80037e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80037e8:	fb02 3311 	mls	r3, r2, r1, r3
 80037ec:	5cc3      	ldrb	r3, [r0, r3]
 80037ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037f2:	460b      	mov	r3, r1
 80037f4:	2900      	cmp	r1, #0
 80037f6:	d1f5      	bne.n	80037e4 <_printf_i+0x16c>
 80037f8:	e7b9      	b.n	800376e <_printf_i+0xf6>
 80037fa:	6813      	ldr	r3, [r2, #0]
 80037fc:	6825      	ldr	r5, [r4, #0]
 80037fe:	6961      	ldr	r1, [r4, #20]
 8003800:	1d18      	adds	r0, r3, #4
 8003802:	6010      	str	r0, [r2, #0]
 8003804:	0628      	lsls	r0, r5, #24
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	d501      	bpl.n	800380e <_printf_i+0x196>
 800380a:	6019      	str	r1, [r3, #0]
 800380c:	e002      	b.n	8003814 <_printf_i+0x19c>
 800380e:	066a      	lsls	r2, r5, #25
 8003810:	d5fb      	bpl.n	800380a <_printf_i+0x192>
 8003812:	8019      	strh	r1, [r3, #0]
 8003814:	2300      	movs	r3, #0
 8003816:	6123      	str	r3, [r4, #16]
 8003818:	4665      	mov	r5, ip
 800381a:	e7b9      	b.n	8003790 <_printf_i+0x118>
 800381c:	6813      	ldr	r3, [r2, #0]
 800381e:	1d19      	adds	r1, r3, #4
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	681d      	ldr	r5, [r3, #0]
 8003824:	6862      	ldr	r2, [r4, #4]
 8003826:	2100      	movs	r1, #0
 8003828:	4628      	mov	r0, r5
 800382a:	f7fc fcd1 	bl	80001d0 <memchr>
 800382e:	b108      	cbz	r0, 8003834 <_printf_i+0x1bc>
 8003830:	1b40      	subs	r0, r0, r5
 8003832:	6060      	str	r0, [r4, #4]
 8003834:	6863      	ldr	r3, [r4, #4]
 8003836:	6123      	str	r3, [r4, #16]
 8003838:	2300      	movs	r3, #0
 800383a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800383e:	e7a7      	b.n	8003790 <_printf_i+0x118>
 8003840:	6923      	ldr	r3, [r4, #16]
 8003842:	462a      	mov	r2, r5
 8003844:	4639      	mov	r1, r7
 8003846:	4630      	mov	r0, r6
 8003848:	47c0      	blx	r8
 800384a:	3001      	adds	r0, #1
 800384c:	d0aa      	beq.n	80037a4 <_printf_i+0x12c>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	079b      	lsls	r3, r3, #30
 8003852:	d413      	bmi.n	800387c <_printf_i+0x204>
 8003854:	68e0      	ldr	r0, [r4, #12]
 8003856:	9b03      	ldr	r3, [sp, #12]
 8003858:	4298      	cmp	r0, r3
 800385a:	bfb8      	it	lt
 800385c:	4618      	movlt	r0, r3
 800385e:	e7a3      	b.n	80037a8 <_printf_i+0x130>
 8003860:	2301      	movs	r3, #1
 8003862:	464a      	mov	r2, r9
 8003864:	4639      	mov	r1, r7
 8003866:	4630      	mov	r0, r6
 8003868:	47c0      	blx	r8
 800386a:	3001      	adds	r0, #1
 800386c:	d09a      	beq.n	80037a4 <_printf_i+0x12c>
 800386e:	3501      	adds	r5, #1
 8003870:	68e3      	ldr	r3, [r4, #12]
 8003872:	9a03      	ldr	r2, [sp, #12]
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	42ab      	cmp	r3, r5
 8003878:	dcf2      	bgt.n	8003860 <_printf_i+0x1e8>
 800387a:	e7eb      	b.n	8003854 <_printf_i+0x1dc>
 800387c:	2500      	movs	r5, #0
 800387e:	f104 0919 	add.w	r9, r4, #25
 8003882:	e7f5      	b.n	8003870 <_printf_i+0x1f8>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ac      	bne.n	80037e2 <_printf_i+0x16a>
 8003888:	7803      	ldrb	r3, [r0, #0]
 800388a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800388e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003892:	e76c      	b.n	800376e <_printf_i+0xf6>
 8003894:	08003f45 	.word	0x08003f45
 8003898:	08003f56 	.word	0x08003f56

0800389c <_sbrk_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4c06      	ldr	r4, [pc, #24]	; (80038b8 <_sbrk_r+0x1c>)
 80038a0:	2300      	movs	r3, #0
 80038a2:	4605      	mov	r5, r0
 80038a4:	4608      	mov	r0, r1
 80038a6:	6023      	str	r3, [r4, #0]
 80038a8:	f7fd fa06 	bl	8000cb8 <_sbrk>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d102      	bne.n	80038b6 <_sbrk_r+0x1a>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	b103      	cbz	r3, 80038b6 <_sbrk_r+0x1a>
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	20000174 	.word	0x20000174

080038bc <__sread>:
 80038bc:	b510      	push	{r4, lr}
 80038be:	460c      	mov	r4, r1
 80038c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c4:	f000 fa96 	bl	8003df4 <_read_r>
 80038c8:	2800      	cmp	r0, #0
 80038ca:	bfab      	itete	ge
 80038cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038ce:	89a3      	ldrhlt	r3, [r4, #12]
 80038d0:	181b      	addge	r3, r3, r0
 80038d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038d6:	bfac      	ite	ge
 80038d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80038da:	81a3      	strhlt	r3, [r4, #12]
 80038dc:	bd10      	pop	{r4, pc}

080038de <__swrite>:
 80038de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e2:	461f      	mov	r7, r3
 80038e4:	898b      	ldrh	r3, [r1, #12]
 80038e6:	05db      	lsls	r3, r3, #23
 80038e8:	4605      	mov	r5, r0
 80038ea:	460c      	mov	r4, r1
 80038ec:	4616      	mov	r6, r2
 80038ee:	d505      	bpl.n	80038fc <__swrite+0x1e>
 80038f0:	2302      	movs	r3, #2
 80038f2:	2200      	movs	r2, #0
 80038f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f8:	f000 f9b6 	bl	8003c68 <_lseek_r>
 80038fc:	89a3      	ldrh	r3, [r4, #12]
 80038fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003906:	81a3      	strh	r3, [r4, #12]
 8003908:	4632      	mov	r2, r6
 800390a:	463b      	mov	r3, r7
 800390c:	4628      	mov	r0, r5
 800390e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003912:	f000 b869 	b.w	80039e8 <_write_r>

08003916 <__sseek>:
 8003916:	b510      	push	{r4, lr}
 8003918:	460c      	mov	r4, r1
 800391a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800391e:	f000 f9a3 	bl	8003c68 <_lseek_r>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	bf15      	itete	ne
 8003928:	6560      	strne	r0, [r4, #84]	; 0x54
 800392a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800392e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003932:	81a3      	strheq	r3, [r4, #12]
 8003934:	bf18      	it	ne
 8003936:	81a3      	strhne	r3, [r4, #12]
 8003938:	bd10      	pop	{r4, pc}

0800393a <__sclose>:
 800393a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800393e:	f000 b8d3 	b.w	8003ae8 <_close_r>
	...

08003944 <__swbuf_r>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	460e      	mov	r6, r1
 8003948:	4614      	mov	r4, r2
 800394a:	4605      	mov	r5, r0
 800394c:	b118      	cbz	r0, 8003956 <__swbuf_r+0x12>
 800394e:	6983      	ldr	r3, [r0, #24]
 8003950:	b90b      	cbnz	r3, 8003956 <__swbuf_r+0x12>
 8003952:	f7ff fbf7 	bl	8003144 <__sinit>
 8003956:	4b21      	ldr	r3, [pc, #132]	; (80039dc <__swbuf_r+0x98>)
 8003958:	429c      	cmp	r4, r3
 800395a:	d12a      	bne.n	80039b2 <__swbuf_r+0x6e>
 800395c:	686c      	ldr	r4, [r5, #4]
 800395e:	69a3      	ldr	r3, [r4, #24]
 8003960:	60a3      	str	r3, [r4, #8]
 8003962:	89a3      	ldrh	r3, [r4, #12]
 8003964:	071a      	lsls	r2, r3, #28
 8003966:	d52e      	bpl.n	80039c6 <__swbuf_r+0x82>
 8003968:	6923      	ldr	r3, [r4, #16]
 800396a:	b363      	cbz	r3, 80039c6 <__swbuf_r+0x82>
 800396c:	6923      	ldr	r3, [r4, #16]
 800396e:	6820      	ldr	r0, [r4, #0]
 8003970:	1ac0      	subs	r0, r0, r3
 8003972:	6963      	ldr	r3, [r4, #20]
 8003974:	b2f6      	uxtb	r6, r6
 8003976:	4283      	cmp	r3, r0
 8003978:	4637      	mov	r7, r6
 800397a:	dc04      	bgt.n	8003986 <__swbuf_r+0x42>
 800397c:	4621      	mov	r1, r4
 800397e:	4628      	mov	r0, r5
 8003980:	f000 f948 	bl	8003c14 <_fflush_r>
 8003984:	bb28      	cbnz	r0, 80039d2 <__swbuf_r+0x8e>
 8003986:	68a3      	ldr	r3, [r4, #8]
 8003988:	3b01      	subs	r3, #1
 800398a:	60a3      	str	r3, [r4, #8]
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	6022      	str	r2, [r4, #0]
 8003992:	701e      	strb	r6, [r3, #0]
 8003994:	6963      	ldr	r3, [r4, #20]
 8003996:	3001      	adds	r0, #1
 8003998:	4283      	cmp	r3, r0
 800399a:	d004      	beq.n	80039a6 <__swbuf_r+0x62>
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	07db      	lsls	r3, r3, #31
 80039a0:	d519      	bpl.n	80039d6 <__swbuf_r+0x92>
 80039a2:	2e0a      	cmp	r6, #10
 80039a4:	d117      	bne.n	80039d6 <__swbuf_r+0x92>
 80039a6:	4621      	mov	r1, r4
 80039a8:	4628      	mov	r0, r5
 80039aa:	f000 f933 	bl	8003c14 <_fflush_r>
 80039ae:	b190      	cbz	r0, 80039d6 <__swbuf_r+0x92>
 80039b0:	e00f      	b.n	80039d2 <__swbuf_r+0x8e>
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <__swbuf_r+0x9c>)
 80039b4:	429c      	cmp	r4, r3
 80039b6:	d101      	bne.n	80039bc <__swbuf_r+0x78>
 80039b8:	68ac      	ldr	r4, [r5, #8]
 80039ba:	e7d0      	b.n	800395e <__swbuf_r+0x1a>
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <__swbuf_r+0xa0>)
 80039be:	429c      	cmp	r4, r3
 80039c0:	bf08      	it	eq
 80039c2:	68ec      	ldreq	r4, [r5, #12]
 80039c4:	e7cb      	b.n	800395e <__swbuf_r+0x1a>
 80039c6:	4621      	mov	r1, r4
 80039c8:	4628      	mov	r0, r5
 80039ca:	f000 f81f 	bl	8003a0c <__swsetup_r>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d0cc      	beq.n	800396c <__swbuf_r+0x28>
 80039d2:	f04f 37ff 	mov.w	r7, #4294967295
 80039d6:	4638      	mov	r0, r7
 80039d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039da:	bf00      	nop
 80039dc:	08003ef4 	.word	0x08003ef4
 80039e0:	08003f14 	.word	0x08003f14
 80039e4:	08003ed4 	.word	0x08003ed4

080039e8 <_write_r>:
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	4c07      	ldr	r4, [pc, #28]	; (8003a08 <_write_r+0x20>)
 80039ec:	4605      	mov	r5, r0
 80039ee:	4608      	mov	r0, r1
 80039f0:	4611      	mov	r1, r2
 80039f2:	2200      	movs	r2, #0
 80039f4:	6022      	str	r2, [r4, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f7fd f90d 	bl	8000c16 <_write>
 80039fc:	1c43      	adds	r3, r0, #1
 80039fe:	d102      	bne.n	8003a06 <_write_r+0x1e>
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	b103      	cbz	r3, 8003a06 <_write_r+0x1e>
 8003a04:	602b      	str	r3, [r5, #0]
 8003a06:	bd38      	pop	{r3, r4, r5, pc}
 8003a08:	20000174 	.word	0x20000174

08003a0c <__swsetup_r>:
 8003a0c:	4b32      	ldr	r3, [pc, #200]	; (8003ad8 <__swsetup_r+0xcc>)
 8003a0e:	b570      	push	{r4, r5, r6, lr}
 8003a10:	681d      	ldr	r5, [r3, #0]
 8003a12:	4606      	mov	r6, r0
 8003a14:	460c      	mov	r4, r1
 8003a16:	b125      	cbz	r5, 8003a22 <__swsetup_r+0x16>
 8003a18:	69ab      	ldr	r3, [r5, #24]
 8003a1a:	b913      	cbnz	r3, 8003a22 <__swsetup_r+0x16>
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f7ff fb91 	bl	8003144 <__sinit>
 8003a22:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <__swsetup_r+0xd0>)
 8003a24:	429c      	cmp	r4, r3
 8003a26:	d10f      	bne.n	8003a48 <__swsetup_r+0x3c>
 8003a28:	686c      	ldr	r4, [r5, #4]
 8003a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	0715      	lsls	r5, r2, #28
 8003a32:	d42c      	bmi.n	8003a8e <__swsetup_r+0x82>
 8003a34:	06d0      	lsls	r0, r2, #27
 8003a36:	d411      	bmi.n	8003a5c <__swsetup_r+0x50>
 8003a38:	2209      	movs	r2, #9
 8003a3a:	6032      	str	r2, [r6, #0]
 8003a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	f04f 30ff 	mov.w	r0, #4294967295
 8003a46:	e03e      	b.n	8003ac6 <__swsetup_r+0xba>
 8003a48:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <__swsetup_r+0xd4>)
 8003a4a:	429c      	cmp	r4, r3
 8003a4c:	d101      	bne.n	8003a52 <__swsetup_r+0x46>
 8003a4e:	68ac      	ldr	r4, [r5, #8]
 8003a50:	e7eb      	b.n	8003a2a <__swsetup_r+0x1e>
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <__swsetup_r+0xd8>)
 8003a54:	429c      	cmp	r4, r3
 8003a56:	bf08      	it	eq
 8003a58:	68ec      	ldreq	r4, [r5, #12]
 8003a5a:	e7e6      	b.n	8003a2a <__swsetup_r+0x1e>
 8003a5c:	0751      	lsls	r1, r2, #29
 8003a5e:	d512      	bpl.n	8003a86 <__swsetup_r+0x7a>
 8003a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a62:	b141      	cbz	r1, 8003a76 <__swsetup_r+0x6a>
 8003a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a68:	4299      	cmp	r1, r3
 8003a6a:	d002      	beq.n	8003a72 <__swsetup_r+0x66>
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f000 f973 	bl	8003d58 <_free_r>
 8003a72:	2300      	movs	r3, #0
 8003a74:	6363      	str	r3, [r4, #52]	; 0x34
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a7c:	81a3      	strh	r3, [r4, #12]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	89a3      	ldrh	r3, [r4, #12]
 8003a88:	f043 0308 	orr.w	r3, r3, #8
 8003a8c:	81a3      	strh	r3, [r4, #12]
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	b94b      	cbnz	r3, 8003aa6 <__swsetup_r+0x9a>
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9c:	d003      	beq.n	8003aa6 <__swsetup_r+0x9a>
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	f000 f917 	bl	8003cd4 <__smakebuf_r>
 8003aa6:	89a2      	ldrh	r2, [r4, #12]
 8003aa8:	f012 0301 	ands.w	r3, r2, #1
 8003aac:	d00c      	beq.n	8003ac8 <__swsetup_r+0xbc>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60a3      	str	r3, [r4, #8]
 8003ab2:	6963      	ldr	r3, [r4, #20]
 8003ab4:	425b      	negs	r3, r3
 8003ab6:	61a3      	str	r3, [r4, #24]
 8003ab8:	6923      	ldr	r3, [r4, #16]
 8003aba:	b953      	cbnz	r3, 8003ad2 <__swsetup_r+0xc6>
 8003abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ac0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003ac4:	d1ba      	bne.n	8003a3c <__swsetup_r+0x30>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	0792      	lsls	r2, r2, #30
 8003aca:	bf58      	it	pl
 8003acc:	6963      	ldrpl	r3, [r4, #20]
 8003ace:	60a3      	str	r3, [r4, #8]
 8003ad0:	e7f2      	b.n	8003ab8 <__swsetup_r+0xac>
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	e7f7      	b.n	8003ac6 <__swsetup_r+0xba>
 8003ad6:	bf00      	nop
 8003ad8:	2000000c 	.word	0x2000000c
 8003adc:	08003ef4 	.word	0x08003ef4
 8003ae0:	08003f14 	.word	0x08003f14
 8003ae4:	08003ed4 	.word	0x08003ed4

08003ae8 <_close_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4c06      	ldr	r4, [pc, #24]	; (8003b04 <_close_r+0x1c>)
 8003aec:	2300      	movs	r3, #0
 8003aee:	4605      	mov	r5, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	6023      	str	r3, [r4, #0]
 8003af4:	f7fd f8ab 	bl	8000c4e <_close>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d102      	bne.n	8003b02 <_close_r+0x1a>
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	b103      	cbz	r3, 8003b02 <_close_r+0x1a>
 8003b00:	602b      	str	r3, [r5, #0]
 8003b02:	bd38      	pop	{r3, r4, r5, pc}
 8003b04:	20000174 	.word	0x20000174

08003b08 <__sflush_r>:
 8003b08:	898a      	ldrh	r2, [r1, #12]
 8003b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b0e:	4605      	mov	r5, r0
 8003b10:	0710      	lsls	r0, r2, #28
 8003b12:	460c      	mov	r4, r1
 8003b14:	d458      	bmi.n	8003bc8 <__sflush_r+0xc0>
 8003b16:	684b      	ldr	r3, [r1, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	dc05      	bgt.n	8003b28 <__sflush_r+0x20>
 8003b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	dc02      	bgt.n	8003b28 <__sflush_r+0x20>
 8003b22:	2000      	movs	r0, #0
 8003b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b2a:	2e00      	cmp	r6, #0
 8003b2c:	d0f9      	beq.n	8003b22 <__sflush_r+0x1a>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b34:	682f      	ldr	r7, [r5, #0]
 8003b36:	6a21      	ldr	r1, [r4, #32]
 8003b38:	602b      	str	r3, [r5, #0]
 8003b3a:	d032      	beq.n	8003ba2 <__sflush_r+0x9a>
 8003b3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	075a      	lsls	r2, r3, #29
 8003b42:	d505      	bpl.n	8003b50 <__sflush_r+0x48>
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	1ac0      	subs	r0, r0, r3
 8003b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b4a:	b10b      	cbz	r3, 8003b50 <__sflush_r+0x48>
 8003b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b4e:	1ac0      	subs	r0, r0, r3
 8003b50:	2300      	movs	r3, #0
 8003b52:	4602      	mov	r2, r0
 8003b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b56:	6a21      	ldr	r1, [r4, #32]
 8003b58:	4628      	mov	r0, r5
 8003b5a:	47b0      	blx	r6
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	d106      	bne.n	8003b70 <__sflush_r+0x68>
 8003b62:	6829      	ldr	r1, [r5, #0]
 8003b64:	291d      	cmp	r1, #29
 8003b66:	d848      	bhi.n	8003bfa <__sflush_r+0xf2>
 8003b68:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <__sflush_r+0x108>)
 8003b6a:	40ca      	lsrs	r2, r1
 8003b6c:	07d6      	lsls	r6, r2, #31
 8003b6e:	d544      	bpl.n	8003bfa <__sflush_r+0xf2>
 8003b70:	2200      	movs	r2, #0
 8003b72:	6062      	str	r2, [r4, #4]
 8003b74:	04d9      	lsls	r1, r3, #19
 8003b76:	6922      	ldr	r2, [r4, #16]
 8003b78:	6022      	str	r2, [r4, #0]
 8003b7a:	d504      	bpl.n	8003b86 <__sflush_r+0x7e>
 8003b7c:	1c42      	adds	r2, r0, #1
 8003b7e:	d101      	bne.n	8003b84 <__sflush_r+0x7c>
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	b903      	cbnz	r3, 8003b86 <__sflush_r+0x7e>
 8003b84:	6560      	str	r0, [r4, #84]	; 0x54
 8003b86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b88:	602f      	str	r7, [r5, #0]
 8003b8a:	2900      	cmp	r1, #0
 8003b8c:	d0c9      	beq.n	8003b22 <__sflush_r+0x1a>
 8003b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b92:	4299      	cmp	r1, r3
 8003b94:	d002      	beq.n	8003b9c <__sflush_r+0x94>
 8003b96:	4628      	mov	r0, r5
 8003b98:	f000 f8de 	bl	8003d58 <_free_r>
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	6360      	str	r0, [r4, #52]	; 0x34
 8003ba0:	e7c0      	b.n	8003b24 <__sflush_r+0x1c>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	47b0      	blx	r6
 8003ba8:	1c41      	adds	r1, r0, #1
 8003baa:	d1c8      	bne.n	8003b3e <__sflush_r+0x36>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0c5      	beq.n	8003b3e <__sflush_r+0x36>
 8003bb2:	2b1d      	cmp	r3, #29
 8003bb4:	d001      	beq.n	8003bba <__sflush_r+0xb2>
 8003bb6:	2b16      	cmp	r3, #22
 8003bb8:	d101      	bne.n	8003bbe <__sflush_r+0xb6>
 8003bba:	602f      	str	r7, [r5, #0]
 8003bbc:	e7b1      	b.n	8003b22 <__sflush_r+0x1a>
 8003bbe:	89a3      	ldrh	r3, [r4, #12]
 8003bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bc4:	81a3      	strh	r3, [r4, #12]
 8003bc6:	e7ad      	b.n	8003b24 <__sflush_r+0x1c>
 8003bc8:	690f      	ldr	r7, [r1, #16]
 8003bca:	2f00      	cmp	r7, #0
 8003bcc:	d0a9      	beq.n	8003b22 <__sflush_r+0x1a>
 8003bce:	0793      	lsls	r3, r2, #30
 8003bd0:	680e      	ldr	r6, [r1, #0]
 8003bd2:	bf08      	it	eq
 8003bd4:	694b      	ldreq	r3, [r1, #20]
 8003bd6:	600f      	str	r7, [r1, #0]
 8003bd8:	bf18      	it	ne
 8003bda:	2300      	movne	r3, #0
 8003bdc:	eba6 0807 	sub.w	r8, r6, r7
 8003be0:	608b      	str	r3, [r1, #8]
 8003be2:	f1b8 0f00 	cmp.w	r8, #0
 8003be6:	dd9c      	ble.n	8003b22 <__sflush_r+0x1a>
 8003be8:	4643      	mov	r3, r8
 8003bea:	463a      	mov	r2, r7
 8003bec:	6a21      	ldr	r1, [r4, #32]
 8003bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	47b0      	blx	r6
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	dc06      	bgt.n	8003c06 <__sflush_r+0xfe>
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bfe:	81a3      	strh	r3, [r4, #12]
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	e78e      	b.n	8003b24 <__sflush_r+0x1c>
 8003c06:	4407      	add	r7, r0
 8003c08:	eba8 0800 	sub.w	r8, r8, r0
 8003c0c:	e7e9      	b.n	8003be2 <__sflush_r+0xda>
 8003c0e:	bf00      	nop
 8003c10:	20400001 	.word	0x20400001

08003c14 <_fflush_r>:
 8003c14:	b538      	push	{r3, r4, r5, lr}
 8003c16:	690b      	ldr	r3, [r1, #16]
 8003c18:	4605      	mov	r5, r0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	b1db      	cbz	r3, 8003c56 <_fflush_r+0x42>
 8003c1e:	b118      	cbz	r0, 8003c28 <_fflush_r+0x14>
 8003c20:	6983      	ldr	r3, [r0, #24]
 8003c22:	b90b      	cbnz	r3, 8003c28 <_fflush_r+0x14>
 8003c24:	f7ff fa8e 	bl	8003144 <__sinit>
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <_fflush_r+0x48>)
 8003c2a:	429c      	cmp	r4, r3
 8003c2c:	d109      	bne.n	8003c42 <_fflush_r+0x2e>
 8003c2e:	686c      	ldr	r4, [r5, #4]
 8003c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c34:	b17b      	cbz	r3, 8003c56 <_fflush_r+0x42>
 8003c36:	4621      	mov	r1, r4
 8003c38:	4628      	mov	r0, r5
 8003c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c3e:	f7ff bf63 	b.w	8003b08 <__sflush_r>
 8003c42:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <_fflush_r+0x4c>)
 8003c44:	429c      	cmp	r4, r3
 8003c46:	d101      	bne.n	8003c4c <_fflush_r+0x38>
 8003c48:	68ac      	ldr	r4, [r5, #8]
 8003c4a:	e7f1      	b.n	8003c30 <_fflush_r+0x1c>
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <_fflush_r+0x50>)
 8003c4e:	429c      	cmp	r4, r3
 8003c50:	bf08      	it	eq
 8003c52:	68ec      	ldreq	r4, [r5, #12]
 8003c54:	e7ec      	b.n	8003c30 <_fflush_r+0x1c>
 8003c56:	2000      	movs	r0, #0
 8003c58:	bd38      	pop	{r3, r4, r5, pc}
 8003c5a:	bf00      	nop
 8003c5c:	08003ef4 	.word	0x08003ef4
 8003c60:	08003f14 	.word	0x08003f14
 8003c64:	08003ed4 	.word	0x08003ed4

08003c68 <_lseek_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	4c07      	ldr	r4, [pc, #28]	; (8003c88 <_lseek_r+0x20>)
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	4608      	mov	r0, r1
 8003c70:	4611      	mov	r1, r2
 8003c72:	2200      	movs	r2, #0
 8003c74:	6022      	str	r2, [r4, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	f7fd f810 	bl	8000c9c <_lseek>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d102      	bne.n	8003c86 <_lseek_r+0x1e>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	b103      	cbz	r3, 8003c86 <_lseek_r+0x1e>
 8003c84:	602b      	str	r3, [r5, #0]
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
 8003c88:	20000174 	.word	0x20000174

08003c8c <__swhatbuf_r>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	460e      	mov	r6, r1
 8003c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c94:	2900      	cmp	r1, #0
 8003c96:	b096      	sub	sp, #88	; 0x58
 8003c98:	4614      	mov	r4, r2
 8003c9a:	461d      	mov	r5, r3
 8003c9c:	da07      	bge.n	8003cae <__swhatbuf_r+0x22>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	602b      	str	r3, [r5, #0]
 8003ca2:	89b3      	ldrh	r3, [r6, #12]
 8003ca4:	061a      	lsls	r2, r3, #24
 8003ca6:	d410      	bmi.n	8003cca <__swhatbuf_r+0x3e>
 8003ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cac:	e00e      	b.n	8003ccc <__swhatbuf_r+0x40>
 8003cae:	466a      	mov	r2, sp
 8003cb0:	f000 f8b2 	bl	8003e18 <_fstat_r>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	dbf2      	blt.n	8003c9e <__swhatbuf_r+0x12>
 8003cb8:	9a01      	ldr	r2, [sp, #4]
 8003cba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003cbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003cc2:	425a      	negs	r2, r3
 8003cc4:	415a      	adcs	r2, r3
 8003cc6:	602a      	str	r2, [r5, #0]
 8003cc8:	e7ee      	b.n	8003ca8 <__swhatbuf_r+0x1c>
 8003cca:	2340      	movs	r3, #64	; 0x40
 8003ccc:	2000      	movs	r0, #0
 8003cce:	6023      	str	r3, [r4, #0]
 8003cd0:	b016      	add	sp, #88	; 0x58
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}

08003cd4 <__smakebuf_r>:
 8003cd4:	898b      	ldrh	r3, [r1, #12]
 8003cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cd8:	079d      	lsls	r5, r3, #30
 8003cda:	4606      	mov	r6, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	d507      	bpl.n	8003cf0 <__smakebuf_r+0x1c>
 8003ce0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ce4:	6023      	str	r3, [r4, #0]
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	2301      	movs	r3, #1
 8003cea:	6163      	str	r3, [r4, #20]
 8003cec:	b002      	add	sp, #8
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	ab01      	add	r3, sp, #4
 8003cf2:	466a      	mov	r2, sp
 8003cf4:	f7ff ffca 	bl	8003c8c <__swhatbuf_r>
 8003cf8:	9900      	ldr	r1, [sp, #0]
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f7ff faab 	bl	8003258 <_malloc_r>
 8003d02:	b948      	cbnz	r0, 8003d18 <__smakebuf_r+0x44>
 8003d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d08:	059a      	lsls	r2, r3, #22
 8003d0a:	d4ef      	bmi.n	8003cec <__smakebuf_r+0x18>
 8003d0c:	f023 0303 	bic.w	r3, r3, #3
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	81a3      	strh	r3, [r4, #12]
 8003d16:	e7e3      	b.n	8003ce0 <__smakebuf_r+0xc>
 8003d18:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <__smakebuf_r+0x7c>)
 8003d1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	6020      	str	r0, [r4, #0]
 8003d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d24:	81a3      	strh	r3, [r4, #12]
 8003d26:	9b00      	ldr	r3, [sp, #0]
 8003d28:	6163      	str	r3, [r4, #20]
 8003d2a:	9b01      	ldr	r3, [sp, #4]
 8003d2c:	6120      	str	r0, [r4, #16]
 8003d2e:	b15b      	cbz	r3, 8003d48 <__smakebuf_r+0x74>
 8003d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d34:	4630      	mov	r0, r6
 8003d36:	f000 f881 	bl	8003e3c <_isatty_r>
 8003d3a:	b128      	cbz	r0, 8003d48 <__smakebuf_r+0x74>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	81a3      	strh	r3, [r4, #12]
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	431d      	orrs	r5, r3
 8003d4c:	81a5      	strh	r5, [r4, #12]
 8003d4e:	e7cd      	b.n	8003cec <__smakebuf_r+0x18>
 8003d50:	0800310d 	.word	0x0800310d

08003d54 <__malloc_lock>:
 8003d54:	4770      	bx	lr

08003d56 <__malloc_unlock>:
 8003d56:	4770      	bx	lr

08003d58 <_free_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	4605      	mov	r5, r0
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d045      	beq.n	8003dec <_free_r+0x94>
 8003d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d64:	1f0c      	subs	r4, r1, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bfb8      	it	lt
 8003d6a:	18e4      	addlt	r4, r4, r3
 8003d6c:	f7ff fff2 	bl	8003d54 <__malloc_lock>
 8003d70:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <_free_r+0x98>)
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	4610      	mov	r0, r2
 8003d76:	b933      	cbnz	r3, 8003d86 <_free_r+0x2e>
 8003d78:	6063      	str	r3, [r4, #4]
 8003d7a:	6014      	str	r4, [r2, #0]
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d82:	f7ff bfe8 	b.w	8003d56 <__malloc_unlock>
 8003d86:	42a3      	cmp	r3, r4
 8003d88:	d90c      	bls.n	8003da4 <_free_r+0x4c>
 8003d8a:	6821      	ldr	r1, [r4, #0]
 8003d8c:	1862      	adds	r2, r4, r1
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	bf04      	itt	eq
 8003d92:	681a      	ldreq	r2, [r3, #0]
 8003d94:	685b      	ldreq	r3, [r3, #4]
 8003d96:	6063      	str	r3, [r4, #4]
 8003d98:	bf04      	itt	eq
 8003d9a:	1852      	addeq	r2, r2, r1
 8003d9c:	6022      	streq	r2, [r4, #0]
 8003d9e:	6004      	str	r4, [r0, #0]
 8003da0:	e7ec      	b.n	8003d7c <_free_r+0x24>
 8003da2:	4613      	mov	r3, r2
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	b10a      	cbz	r2, 8003dac <_free_r+0x54>
 8003da8:	42a2      	cmp	r2, r4
 8003daa:	d9fa      	bls.n	8003da2 <_free_r+0x4a>
 8003dac:	6819      	ldr	r1, [r3, #0]
 8003dae:	1858      	adds	r0, r3, r1
 8003db0:	42a0      	cmp	r0, r4
 8003db2:	d10b      	bne.n	8003dcc <_free_r+0x74>
 8003db4:	6820      	ldr	r0, [r4, #0]
 8003db6:	4401      	add	r1, r0
 8003db8:	1858      	adds	r0, r3, r1
 8003dba:	4282      	cmp	r2, r0
 8003dbc:	6019      	str	r1, [r3, #0]
 8003dbe:	d1dd      	bne.n	8003d7c <_free_r+0x24>
 8003dc0:	6810      	ldr	r0, [r2, #0]
 8003dc2:	6852      	ldr	r2, [r2, #4]
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	4401      	add	r1, r0
 8003dc8:	6019      	str	r1, [r3, #0]
 8003dca:	e7d7      	b.n	8003d7c <_free_r+0x24>
 8003dcc:	d902      	bls.n	8003dd4 <_free_r+0x7c>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	602b      	str	r3, [r5, #0]
 8003dd2:	e7d3      	b.n	8003d7c <_free_r+0x24>
 8003dd4:	6820      	ldr	r0, [r4, #0]
 8003dd6:	1821      	adds	r1, r4, r0
 8003dd8:	428a      	cmp	r2, r1
 8003dda:	bf04      	itt	eq
 8003ddc:	6811      	ldreq	r1, [r2, #0]
 8003dde:	6852      	ldreq	r2, [r2, #4]
 8003de0:	6062      	str	r2, [r4, #4]
 8003de2:	bf04      	itt	eq
 8003de4:	1809      	addeq	r1, r1, r0
 8003de6:	6021      	streq	r1, [r4, #0]
 8003de8:	605c      	str	r4, [r3, #4]
 8003dea:	e7c7      	b.n	8003d7c <_free_r+0x24>
 8003dec:	bd38      	pop	{r3, r4, r5, pc}
 8003dee:	bf00      	nop
 8003df0:	20000090 	.word	0x20000090

08003df4 <_read_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4c07      	ldr	r4, [pc, #28]	; (8003e14 <_read_r+0x20>)
 8003df8:	4605      	mov	r5, r0
 8003dfa:	4608      	mov	r0, r1
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	2200      	movs	r2, #0
 8003e00:	6022      	str	r2, [r4, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f7fc feea 	bl	8000bdc <_read>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d102      	bne.n	8003e12 <_read_r+0x1e>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	b103      	cbz	r3, 8003e12 <_read_r+0x1e>
 8003e10:	602b      	str	r3, [r5, #0]
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	20000174 	.word	0x20000174

08003e18 <_fstat_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	4c07      	ldr	r4, [pc, #28]	; (8003e38 <_fstat_r+0x20>)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4605      	mov	r5, r0
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	f7fc ff1e 	bl	8000c66 <_fstat>
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	d102      	bne.n	8003e34 <_fstat_r+0x1c>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	b103      	cbz	r3, 8003e34 <_fstat_r+0x1c>
 8003e32:	602b      	str	r3, [r5, #0]
 8003e34:	bd38      	pop	{r3, r4, r5, pc}
 8003e36:	bf00      	nop
 8003e38:	20000174 	.word	0x20000174

08003e3c <_isatty_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	4c06      	ldr	r4, [pc, #24]	; (8003e58 <_isatty_r+0x1c>)
 8003e40:	2300      	movs	r3, #0
 8003e42:	4605      	mov	r5, r0
 8003e44:	4608      	mov	r0, r1
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	f7fc ff1d 	bl	8000c86 <_isatty>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d102      	bne.n	8003e56 <_isatty_r+0x1a>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	b103      	cbz	r3, 8003e56 <_isatty_r+0x1a>
 8003e54:	602b      	str	r3, [r5, #0]
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	20000174 	.word	0x20000174

08003e5c <_init>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	bf00      	nop
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr

08003e68 <_fini>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr
